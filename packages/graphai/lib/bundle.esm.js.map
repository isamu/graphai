{"version":3,"file":"bundle.esm.js","sources":["../src/type.ts","../src/utils/GraphAILogger.ts","../src/utils/prop_function.ts","../src/utils/utils.ts","../src/utils/nodeUtils.ts","../src/transaction_log.ts","../src/utils/data_source.ts","../src/utils/result.ts","../src/node.ts","../src/validators/common.ts","../src/validators/graph_data_validator.ts","../src/validators/nodeValidator.ts","../src/validators/static_node_validator.ts","../src/validators/computed_node_validator.ts","../src/validators/relation_validator.ts","../src/validators/agent_validator.ts","../src/validator.ts","../src/task_manager.ts","../src/graphai.ts"],"sourcesContent":["import type { TransactionLog } from \"./transaction_log\";\nimport type { TaskManager } from \"./task_manager\";\nimport type { GraphAI } from \"./graphai\";\n\nexport enum NodeState {\n  Waiting = \"waiting\",\n  Queued = \"queued\",\n  Executing = \"executing\",\n  ExecutingServer = \"executing-server\",\n  Failed = \"failed\",\n  TimedOut = \"timed-out\",\n  Abort = \"abort\",\n  Completed = \"completed\",\n  Injected = \"injected\",\n  Skipped = \"skipped\",\n}\n\nexport type DefaultResultData = Record<string, any> | string | number | boolean | Array<DefaultResultData>;\nexport type DefaultInputData = Record<string, any>;\nexport type DefaultConfigData = Record<string, any>;\nexport type ResultData<ResultType = DefaultResultData> = ResultType | undefined;\nexport type ResultDataDictionary<ResultType = DefaultResultData> = Record<string, ResultData<ResultType>>;\n\nexport type ConfigData<ConfigType = DefaultConfigData> = ConfigType;\nexport type ConfigDataDictionary<ConfigType = DefaultConfigData> = Record<string, ConfigType>;\nexport type DefaultParamsType = Record<string, any>;\nexport type NodeDataParams<ParamsType = DefaultParamsType> = ParamsType; // Agent-specific parameters\n\nexport type PassThrough = Record<string, any>;\n\nexport type DataSource = {\n  nodeId?: string;\n  value?: any;\n  propIds?: string[];\n};\n\ntype ConsoleAttribute = boolean | string | Record<string, any>;\nexport type ConsoleElement = boolean | { before?: ConsoleAttribute; after?: ConsoleAttribute };\n\nexport type StaticNodeData = {\n  value?: ResultData; // initial value for static node.\n  update?: string; // nodeId (+.propId) to get value after a loop\n  isResult?: boolean;\n  console?: ConsoleElement;\n};\nexport type AgentAnonymousFunction = (...params: any[]) => unknown;\n\nexport type AgentFilterParams = Record<string, any>;\n\nexport type GraphDataLoaderOption = { fileName: string; option?: any };\n\nexport type ComputedNodeData = {\n  agent: string | AgentAnonymousFunction;\n  inputs?: Record<string, any>;\n  output?: Record<string, any>;\n  anyInput?: boolean; // any input makes this node ready\n  params?: NodeDataParams;\n  filterParams?: AgentFilterParams; // agent filter\n  retry?: number;\n  timeout?: number; // msec\n  if?: string; // conditional execution\n  unless?: string; // conditional execution\n  defaultValue?: ResultData;\n  graph?: GraphData | string;\n  graphLoader?: GraphDataLoaderOption;\n  isResult?: boolean;\n  priority?: number; // The default is 0.\n  passThrough?: PassThrough; // data that pass trough to result\n  console?: ConsoleElement;\n};\n\nexport type NodeData = StaticNodeData | ComputedNodeData;\n\nexport type LoopData = {\n  count?: number;\n  while?: string | boolean;\n};\n\nexport type GraphData = {\n  version?: number; // major version, 0.1, 0.2, ...\n  nodes: Record<string, NodeData>;\n  concurrency?: number;\n  loop?: LoopData;\n  verbose?: boolean;\n  retry?: number;\n  metadata?: any; // Stores information about GraphData. GraphAI itself is not used this data.\n};\n\nexport type GraphDataLoader = (loaderOption: GraphDataLoaderOption) => GraphData;\n\nexport type GraphOptions = {\n  agentFilters?: AgentFilterInfo[] | undefined;\n  taskManager?: TaskManager | undefined;\n  bypassAgentIds?: string[] | undefined;\n  config?: ConfigDataDictionary;\n  graphLoader?: GraphDataLoader;\n  forceLoop?: boolean;\n};\n\nexport type CacheTypes = \"pureAgent\" | \"impureAgent\";\n\nexport type AgentFunctionContextDebugInfo = {\n  verbose: boolean;\n  nodeId: string;\n  state: string;\n  subGraphs: Map<string, GraphAI>;\n  retry: number;\n  agentId?: string;\n  version?: number;\n  isResult?: boolean;\n};\n\nexport type AgentFunctionContext<ParamsType = DefaultParamsType, NamedInputDataType = DefaultInputData, ConfigType = DefaultConfigData> = {\n  params: NodeDataParams<ParamsType>;\n  inputSchema?: any;\n  namedInputs: NamedInputDataType;\n  debugInfo: AgentFunctionContextDebugInfo;\n  forNestedGraph?: {\n    graphData?: GraphData; // nested graph\n    agents: AgentFunctionInfoDictionary; // for nested graph\n    graphOptions: GraphOptions;\n    onLogCallback?: (log: TransactionLog, isUpdate: boolean) => void;\n    callbacks?: CallbackFunction[];\n  };\n  cacheType?: CacheTypes;\n  filterParams: AgentFilterParams; // agent filter\n  log?: TransactionLog[];\n  config?: ConfigType;\n};\n\nexport type AgentFunction<\n  ParamsType = DefaultParamsType,\n  ResultType = DefaultResultData,\n  NamedInputDataType = DefaultInputData,\n  ConfigType = DefaultConfigData,\n> = (context: AgentFunctionContext<ParamsType, NamedInputDataType, ConfigType>) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterFunction<ParamsType = DefaultParamsType, ResultType = DefaultResultData, NamedInputDataType = DefaultInputData> = (\n  context: AgentFunctionContext<ParamsType, NamedInputDataType>,\n  agent: AgentFunction,\n) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterInfo = {\n  name: string;\n  agent: AgentFilterFunction;\n  agentIds?: string[];\n  nodeIds?: string[];\n  filterParams?: AgentFilterParams;\n};\n\nexport type AgentFunctionInfoSample = {\n  inputs: any;\n  params: DefaultParamsType;\n  result: any;\n  graph?: GraphData;\n  description?: string;\n};\n\nexport type AgentFunctionInfo = {\n  name: string;\n  agent: AgentFunction<any, any, any, any>;\n  mock: AgentFunction<any, any, any, any>;\n  inputs?: any; // inputs data schema\n  output?: any; // output data schema\n  params?: any; // params data schema\n  config?: any; // config data schema\n  outputFormat?: any;\n  tools?: Record<string, any>[]; // function calling(tools) schema.\n  samples: AgentFunctionInfoSample[]; // sample data. This is for document and unit test.\n  description: string;\n  category: string[];\n  author: string;\n  repository: string;\n  source?: string;\n  package?: string;\n  license: string;\n  cacheType?: CacheTypes;\n  environmentVariables?: string[]; // Environment variables required for execution\n  hasGraphData?: boolean; // The agent that executes graph data using nestedAgentGenerator is true\n  stream?: boolean; // is stream support?\n  apiKeys?: string[];\n  npms?: string[];\n};\n\nexport type AgentFunctionInfoDictionary = Record<string, AgentFunctionInfo>;\n\nexport type PropFunction = (result: ResultData, propId: string) => ResultData;\n\nexport type CallbackFunction = (log: TransactionLog, isUpdate: boolean) => void;\n","type LogLevel = \"debug\" | \"info\" | \"log\" | \"warn\" | \"error\";\ntype LoggerFunction = (level: LogLevel, ...args: any[]) => void;\n\nconst enabledLevels: Record<LogLevel, boolean> = {\n  debug: true,\n  info: true,\n  log: true,\n  warn: true,\n  error: true,\n};\n\nlet customLogger: LoggerFunction | null = null;\n\nfunction setLevelEnabled(level: LogLevel, enabled: boolean) {\n  enabledLevels[level] = enabled;\n}\n\nfunction setLogger(logger: LoggerFunction) {\n  customLogger = logger;\n}\n\nfunction output(level: LogLevel, ...args: any[]) {\n  if (!enabledLevels[level]) return;\n  if (customLogger) {\n    customLogger(level, ...args);\n  } else {\n    (console[level] || console.log)(...args);\n  }\n}\n\nfunction debug(...args: any[]) {\n  output(\"debug\", ...args);\n}\nfunction info(...args: any[]) {\n  output(\"info\", ...args);\n}\nfunction log(...args: any[]) {\n  output(\"log\", ...args);\n}\nfunction warn(...args: any[]) {\n  output(\"warn\", ...args);\n}\nfunction error(...args: any[]) {\n  output(\"error\", ...args);\n}\n\nexport const GraphAILogger = {\n  setLevelEnabled,\n  setLogger,\n  debug,\n  info,\n  log,\n  warn,\n  error,\n};\n","import { PropFunction } from \"../type\";\nimport { isObject, loopCounterKey } from \"./utils\";\nimport { GraphNodes } from \"../node\";\nimport { GraphAILogger } from \"./GraphAILogger\";\n\nexport const propFunctionRegex = /^[a-zA-Z]+\\([^)]*\\)$/;\n\nconst propArrayFunction: PropFunction = (result, propId) => {\n  if (Array.isArray(result)) {\n    if (propId === \"length()\") {\n      return result.length;\n    }\n    if (propId === \"flat()\") {\n      return result.flat();\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result, null, 2);\n    }\n    if (propId === \"isEmpty()\") {\n      return result.length === 0;\n    }\n    // array join\n    const matchJoin = propId.match(/^join\\(([,-\\s]?)\\)$/);\n    if (matchJoin && Array.isArray(matchJoin)) {\n      return result.join(matchJoin[1] ?? \"\");\n    }\n  }\n  return undefined;\n};\n\nconst propObjectFunction: PropFunction = (result, propId) => {\n  if (isObject(result)) {\n    if (propId === \"keys()\") {\n      return Object.keys(result);\n    }\n    if (propId === \"values()\") {\n      return Object.values(result);\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result, null, 2);\n    }\n  }\n  return undefined;\n};\n\nconst propStringFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"string\") {\n    if (propId === \"codeBlock()\") {\n      const match = (\"\\n\" + result).match(/\\n```[a-zA-z]*([\\s\\S]*?)\\n```/);\n      if (match) {\n        return match[1];\n      }\n    }\n    if (propId === \"jsonParse()\") {\n      return JSON.parse(result);\n    }\n    if (propId === \"toNumber()\") {\n      const ret = Number(result);\n      if (!isNaN(ret)) {\n        return ret;\n      }\n    }\n    if (propId === \"trim()\") {\n      return result.trim();\n    }\n    if (propId === \"toLowerCase()\") {\n      return result.toLowerCase();\n    }\n    if (propId === \"toUpperCase()\") {\n      return result.toUpperCase();\n    }\n    const sliceMatch = propId.match(/^slice\\((-?\\d+)(?:,\\s*(-?\\d+))?\\)/);\n    if (sliceMatch) {\n      if (sliceMatch[2] !== undefined) {\n        return result.slice(Number(sliceMatch[1]), Number(sliceMatch[2]));\n      }\n      if (sliceMatch[1] !== undefined) {\n        return result.slice(Number(sliceMatch[1]));\n      }\n      GraphAILogger.warn(\"slice is not valid format: \" + sliceMatch);\n    }\n\n    const splitMatch = propId.match(/^split\\(([-_:;.,\\s\\n]+)\\)$/);\n    if (splitMatch) {\n      return result.split(splitMatch[1]);\n    }\n  }\n  return undefined;\n};\nconst propNumberFunction: PropFunction = (result, propId) => {\n  if (result !== undefined && Number.isFinite(result)) {\n    if (propId === \"toString()\") {\n      return String(result);\n    }\n    const regex = /^add\\((-?\\d+)\\)$/;\n    const match = propId.match(regex);\n    if (match) {\n      return Number(result) + Number(match[1]);\n    }\n  }\n  return undefined;\n};\nconst propBooleanFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"boolean\") {\n    if (propId === \"not()\") {\n      return !result;\n    }\n  }\n  return undefined;\n};\n\nexport const propFunctions = [propArrayFunction, propObjectFunction, propStringFunction, propNumberFunction, propBooleanFunction];\n\nexport const utilsFunctions = (input: string, nodes: GraphNodes) => {\n  if (input === \"@now\" || input === \"@now_ms\") {\n    return Date.now();\n  }\n  if (input === \"@now_s\") {\n    return Math.floor(Date.now() / 1000);\n  }\n  if (input === \"@loop\") {\n    return nodes[loopCounterKey].result as string;\n  }\n  // If a placeholder does not match any key, replace it with an empty string.\n  GraphAILogger.warn(\"not match template utility function: ${\" + input + \"}\");\n  return \"\";\n};\n","import { DataSource, AgentFunction, AgentFunctionInfo, NodeData, StaticNodeData, ComputedNodeData, NodeState } from \"../type\";\nimport type { GraphNodes } from \"../node\";\nimport { GraphAILogger } from \"./GraphAILogger\";\nimport { utilsFunctions } from \"./prop_function\";\n\nexport const sleep = async (milliseconds: number) => {\n  return await new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport const parseNodeName = (inputNodeId: any, isSelfNode: boolean = false, nodes?: GraphNodes): DataSource => {\n  if (isSelfNode) {\n    if (typeof inputNodeId === \"string\" && inputNodeId[0] === \".\") {\n      const parts = inputNodeId.split(\".\");\n      return { nodeId: \"self\", propIds: parts.slice(1) };\n    }\n    return { value: inputNodeId };\n  }\n  if (typeof inputNodeId === \"string\") {\n    const regex = /^:(.*)$/;\n    const match = inputNodeId.match(regex);\n    if (match) {\n      const parts = match[1].split(/(?<!\\()\\.(?!\\))/);\n      if (parts.length == 1) {\n        return { nodeId: parts[0] };\n      }\n      return { nodeId: parts[0], propIds: parts.slice(1) };\n    }\n    const regexUtil = /^@(.*)$/;\n    const matchUtil = inputNodeId.match(regexUtil);\n    // Only when just called from resultsOfInner\n    if (nodes && matchUtil) {\n      return { value: utilsFunctions(inputNodeId, nodes) };\n    }\n  }\n  return { value: inputNodeId }; // non-string literal\n};\n\nexport function assert(condition: boolean, message: string, isWarn: boolean = false): asserts condition {\n  if (!condition) {\n    if (!isWarn) {\n      throw new Error(message);\n    }\n    GraphAILogger.warn(\"warn: \" + message);\n  }\n}\n\nexport const isObject = <Values = unknown>(x: unknown): x is Record<string, Values> => {\n  return x !== null && typeof x === \"object\";\n};\n\nexport const isNull = (data: unknown) => {\n  return data === null || data === undefined;\n};\n\nexport const strIntentionalError = \"Intentional Error for Debugging\";\n\nexport const defaultAgentInfo = {\n  name: \"defaultAgentInfo\",\n  samples: [\n    {\n      inputs: [],\n      params: {},\n      result: {},\n    },\n  ],\n  description: \"\",\n  category: [],\n  author: \"\",\n  repository: \"\",\n  license: \"\",\n};\n\nexport const agentInfoWrapper = (agent: AgentFunction<any, any, any, any>): AgentFunctionInfo => {\n  return {\n    agent,\n    mock: agent,\n    ...defaultAgentInfo,\n  };\n};\n\nconst objectToKeyArray = (innerData: any) => {\n  const ret: string[][] = [];\n  Object.keys(innerData).forEach((key: string) => {\n    ret.push([key]);\n    if (Object.keys(innerData[key]).length > 0) {\n      objectToKeyArray(innerData[key]).forEach((tmp: string[]) => {\n        ret.push([key, ...tmp]);\n      });\n    }\n  });\n  return ret;\n};\n\nexport const debugResultKey = (agentId: string, result: any) => {\n  return objectToKeyArray({ [agentId]: debugResultKeyInner(result) }).map((objectKeys: string[]) => {\n    return \":\" + objectKeys.join(\".\");\n  });\n};\n\nconst debugResultKeyInner = (result: any) => {\n  if (result === null || result === undefined) {\n    return {};\n  }\n  if (typeof result === \"string\") {\n    return {};\n  }\n  if (Array.isArray(result)) {\n    return Array.from(result.keys()).reduce((tmp: Record<string, any>, index: number) => {\n      tmp[\"$\" + String(index)] = debugResultKeyInner(result[index]);\n      return tmp;\n    }, {});\n  }\n  return Object.keys(result).reduce((tmp: Record<string, any>, key: string) => {\n    tmp[key] = debugResultKeyInner(result[key]);\n    return tmp;\n  }, {});\n};\n\nexport const isLogicallyTrue = (value: any) => {\n  // Notice that empty aray is not true under GraphAI\n  if (Array.isArray(value) ? value.length === 0 : !value) {\n    return false;\n  }\n  return true;\n};\n\nexport const defaultTestContext = {\n  debugInfo: {\n    nodeId: \"test\",\n    retry: 0,\n    verbose: true,\n    state: NodeState.Executing,\n    subGraphs: new Map(),\n  },\n  params: {},\n  filterParams: {},\n  agents: {},\n  log: [],\n};\n\nexport const isNamedInputs = <Values = unknown>(namedInputs: unknown): namedInputs is Record<string, Values> => {\n  return isObject(namedInputs) && !Array.isArray(namedInputs) && Object.keys(namedInputs || {}).length > 0;\n};\n\nexport const isComputedNodeData = (node: NodeData): node is ComputedNodeData => {\n  return \"agent\" in node;\n};\n\nexport const isStaticNodeData = (node: NodeData): node is StaticNodeData => {\n  return !(\"agent\" in node);\n};\n\nexport const loopCounterKey: string = \"__loopIndex\";\n","import { parseNodeName, isObject } from \"./utils\";\nimport { DataSource } from \"../type\";\n\n// for dataSource\nexport const inputs2dataSources = (inputs: any): DataSource[] => {\n  if (Array.isArray(inputs)) {\n    return inputs.map((inp) => inputs2dataSources(inp)).flat();\n  }\n  if (isObject(inputs)) {\n    return Object.values(inputs)\n      .map((input) => inputs2dataSources(input))\n      .flat();\n  }\n  if (typeof inputs === \"string\") {\n    const templateMatch = [...inputs.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      return inputs2dataSources(templateMatch);\n    }\n  }\n\n  return parseNodeName(inputs) as any;\n};\n\n// TODO: Maybe it's a remnant of old array inputs. Check and delete.\nexport const dataSourceNodeIds = (sources: DataSource[]): string[] => {\n  if (!Array.isArray(sources)) {\n    throw new Error(\"sources must be array!! maybe inputs is invalid\");\n  }\n  return sources.filter((source: DataSource) => source.nodeId).map((source) => source.nodeId!);\n};\n","import { ResultData, NodeDataParams, NodeState } from \"./type\";\nimport type { GraphAI } from \"./graphai\";\nimport type { ComputedNode, StaticNode } from \"./node\";\nimport { debugResultKey } from \"./utils/utils\";\nimport { dataSourceNodeIds } from \"./utils/nodeUtils\";\n\nexport class TransactionLog {\n  public nodeId: string;\n  public state: NodeState;\n  public startTime?: number;\n  public endTime?: number;\n  public retryCount?: number;\n  public agentId?: string;\n  public params?: NodeDataParams;\n  public inputs?: string[];\n  public inputsData?: Array<ResultData>;\n  public injectFrom?: string;\n  public errorMessage?: string;\n  public result?: ResultData;\n  public resultKeys?: string[];\n  public mapIndex?: number;\n  public isLoop?: boolean;\n  public repeatCount?: number;\n  public log?: TransactionLog[];\n  constructor(nodeId: string) {\n    this.nodeId = nodeId;\n    this.state = NodeState.Waiting;\n  }\n\n  public initForComputedNode(node: ComputedNode, graph: GraphAI) {\n    this.agentId = node.getAgentId();\n    this.params = node.params;\n    graph.appendLog(this);\n  }\n\n  public onInjected(node: StaticNode, graph: GraphAI, injectFrom?: string) {\n    const isUpdating = \"endTime\" in this;\n    this.result = node.result;\n    this.state = node.state;\n    this.endTime = Date.now();\n    this.injectFrom = injectFrom;\n    graph.setLoopLog(this);\n    // console.log(this)\n    if (isUpdating) {\n      graph.updateLog(this);\n    } else {\n      graph.appendLog(this);\n    }\n  }\n\n  public onComplete(node: ComputedNode, graph: GraphAI, localLog: TransactionLog[]) {\n    this.result = node.result;\n    this.resultKeys = debugResultKey(this.agentId || \"\", node.result);\n    this.state = node.state;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    if (localLog.length > 0) {\n      this.log = localLog;\n    }\n    graph.updateLog(this);\n  }\n\n  public beforeExecute(node: ComputedNode, graph: GraphAI, transactionId: number, inputs: ResultData[]) {\n    this.state = node.state;\n    this.retryCount = node.retryCount > 0 ? node.retryCount : undefined;\n    this.startTime = transactionId;\n    this.inputs = dataSourceNodeIds(node.dataSources);\n    this.inputsData = inputs.length > 0 ? inputs : undefined;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public beforeAddTask(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public onError(node: ComputedNode, graph: GraphAI, errorMessage: string) {\n    this.state = node.state;\n    this.errorMessage = errorMessage;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n\n  public onSkipped(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n}\n","import { ResultData, DataSource, PropFunction } from \"../type\";\nimport { isObject, isNull } from \"./utils\";\nimport { propFunctionRegex } from \"./prop_function\";\nimport { GraphAILogger } from \"./GraphAILogger\";\n\nconst getNestedData = (result: ResultData, propId: string, propFunctions: PropFunction[]) => {\n  const match = propId.match(propFunctionRegex);\n  if (match) {\n    for (const propFunction of propFunctions) {\n      const ret = propFunction(result, propId);\n      if (!isNull(ret)) {\n        return ret;\n      }\n    }\n  }\n\n  // for array.\n  if (Array.isArray(result)) {\n    // $0, $1. array value.\n    const regex = /^\\$(\\d+)$/;\n    const match = propId.match(regex);\n    if (match) {\n      const index = parseInt(match[1], 10);\n      return result[index];\n    }\n    if (propId === \"$last\") {\n      return result[result.length - 1];\n    }\n  } else if (isObject(result)) {\n    if (propId in result) {\n      return result[propId];\n    }\n  }\n  return undefined;\n};\n\nconst innerGetDataFromSource = (result: ResultData, propIds: string[] | undefined, propFunctions: PropFunction[]): ResultData | undefined => {\n  if (!isNull(result) && propIds && propIds.length > 0) {\n    const propId = propIds[0];\n    const ret = getNestedData(result, propId, propFunctions);\n    if (ret === undefined) {\n      GraphAILogger.error(`prop: ${propIds.join(\".\")} is not hit`);\n    }\n    if (propIds.length > 1) {\n      return innerGetDataFromSource(ret, propIds.slice(1), propFunctions);\n    }\n    return ret;\n  }\n  return result;\n};\n\nexport const getDataFromSource = (result: ResultData | undefined, source: DataSource, propFunctions: PropFunction[] = []): ResultData | undefined => {\n  if (!source.nodeId) {\n    return source.value;\n  }\n  return innerGetDataFromSource(result, source.propIds, propFunctions);\n};\n","import { DataSource, ResultData, PropFunction } from \"../type\";\n\nimport { GraphNodes } from \"../node\";\n\nimport { parseNodeName, isNamedInputs, isObject, isNull } from \"./utils\";\nimport { getDataFromSource } from \"./data_source\";\nimport { utilsFunctions } from \"./prop_function\";\n\nconst replaceTemplatePlaceholders = (input: string, templateMatch: string[], nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean) => {\n  // GOD format ${:node.prop1.prop2}\n  const godResults = resultsOfInner(\n    templateMatch.filter((text) => text.startsWith(\":\")),\n    nodes,\n    propFunctions,\n    isSelfNode,\n  );\n  // utilsFunctions ${@now}\n  const utilsFuncResult = templateMatch\n    .filter((text) => text.startsWith(\"@\"))\n    .reduce((tmp: Record<string, string | number>, key: string) => {\n      tmp[key] = utilsFunctions(key, nodes);\n      return tmp;\n    }, {});\n  return Array.from(templateMatch.keys()).reduce((tmp, key) => {\n    if (templateMatch[key].startsWith(\":\")) {\n      return tmp.replaceAll(\"${\" + templateMatch[key] + \"}\", (godResults as any)[key]);\n    }\n    return tmp.replaceAll(\"${\" + templateMatch[key] + \"}\", (utilsFuncResult as any)[templateMatch[key]]);\n  }, input);\n};\n\nconst resultsOfInner = (input: any, nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean = false): ResultData => {\n  if (Array.isArray(input)) {\n    return input.map((inp) => resultsOfInner(inp, nodes, propFunctions, isSelfNode));\n  }\n  if (isNamedInputs(input)) {\n    return resultsOf(input, nodes, propFunctions, isSelfNode);\n  }\n  if (typeof input === \"string\") {\n    const templateMatch = [...input.matchAll(/\\${([:@][^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      return replaceTemplatePlaceholders(input, templateMatch, nodes, propFunctions, isSelfNode);\n    }\n  }\n  // :node.prod\n  return resultOf(parseNodeName(input, isSelfNode, nodes), nodes, propFunctions);\n};\n\nexport const resultsOf = (inputs: Record<string, any>, nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean = false) => {\n  return Object.keys(inputs).reduce((tmp: Record<string, ResultData>, key) => {\n    const input = inputs[key];\n    tmp[key] = isNamedInputs(input) ? resultsOf(input, nodes, propFunctions, isSelfNode) : resultsOfInner(input, nodes, propFunctions, isSelfNode);\n    return tmp;\n  }, {});\n};\n\nexport const resultOf = (source: DataSource, nodes: GraphNodes, propFunctions: PropFunction[]) => {\n  const { result } = source.nodeId ? nodes[source.nodeId] : { result: undefined };\n  return getDataFromSource(result, source, propFunctions);\n};\n\n// clean up object for anyInput\nexport const cleanResultInner = (results: ResultData): ResultData | null => {\n  if (Array.isArray(results)) {\n    return results.map((result: ResultData) => cleanResultInner(result)).filter((result) => !isNull(result));\n  }\n\n  if (isObject<ResultData>(results)) {\n    return Object.keys(results).reduce((tmp: Record<string, ResultData>, key: string) => {\n      const value = cleanResultInner(results[key]);\n      if (!isNull(value)) {\n        tmp[key] = value;\n      }\n      return tmp;\n    }, {});\n  }\n\n  return results;\n};\n\nexport const cleanResult = (results: Record<string, ResultData | undefined>) => {\n  return Object.keys(results).reduce((tmp: Record<string, ResultData | undefined>, key: string) => {\n    const value = cleanResultInner(results[key]);\n    if (!isNull(value)) {\n      tmp[key] = value;\n    }\n    return tmp;\n  }, {});\n};\n","import type { GraphAI, GraphData } from \"./index\";\nimport { strIntentionalError, isNamedInputs } from \"./utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"./utils/nodeUtils\";\n\nimport {\n  NodeDataParams,\n  ResultData,\n  DataSource,\n  ComputedNodeData,\n  StaticNodeData,\n  NodeState,\n  AgentFunctionContext,\n  AgentFunction,\n  AgentFilterInfo,\n  AgentFilterParams,\n  AgentFunctionContextDebugInfo,\n  DefaultParamsType,\n  DefaultInputData,\n  PassThrough,\n  ConsoleElement,\n  ConfigData,\n} from \"./type\";\nimport { parseNodeName, assert, isLogicallyTrue, isObject } from \"./utils/utils\";\nimport { TransactionLog } from \"./transaction_log\";\nimport { resultsOf } from \"./utils/result\";\nimport { GraphAILogger } from \"./utils/GraphAILogger\";\n\nexport class Node {\n  public readonly nodeId: string;\n  public readonly waitlist = new Set<string>(); // List of nodes which need data from this node.\n  public state = NodeState.Waiting;\n  public result: ResultData | undefined = undefined;\n\n  protected graph: GraphAI;\n  protected log: TransactionLog;\n  protected console: ConsoleElement; // console output option (before and/or after)\n\n  constructor(nodeId: string, graph: GraphAI) {\n    this.nodeId = nodeId;\n    this.graph = graph;\n    this.log = new TransactionLog(nodeId);\n    this.console = {};\n  }\n\n  public asString() {\n    return `${this.nodeId}: ${this.state} ${[...this.waitlist]}`;\n  }\n\n  // This method is called either as the result of computation (computed node) or\n  // injection (static node).\n  protected onSetResult() {\n    this.waitlist.forEach((waitingNodeId) => {\n      const waitingNode = this.graph.nodes[waitingNodeId];\n      if (waitingNode.isComputedNode) {\n        waitingNode.removePending(this.nodeId);\n        this.graph.pushQueueIfReadyAndRunning(waitingNode);\n      }\n    });\n  }\n\n  protected afterConsoleLog(result: ResultData) {\n    if (this.console === false) {\n      return;\n    } else if (this.console === true || this.console.after === true) {\n      GraphAILogger.log(typeof result === \"string\" ? result : JSON.stringify(result, null, 2));\n    } else if (this.console.after) {\n      if (isObject(this.console.after)) {\n        GraphAILogger.log(\n          JSON.stringify(resultsOf(this.console.after, { self: { result } as unknown as ComputedNode | StaticNode }, this.graph.propFunctions, true), null, 2),\n        );\n      } else {\n        GraphAILogger.log(this.console.after);\n      }\n    }\n  }\n}\n\nexport class ComputedNode extends Node {\n  public readonly graphId: string;\n  public readonly isResult: boolean;\n  public readonly params: NodeDataParams; // Agent-specific parameters\n  private readonly filterParams: AgentFilterParams;\n  public readonly nestedGraph?: GraphData | DataSource;\n  public readonly retryLimit: number;\n  public retryCount: number = 0;\n  private readonly agentId?: string;\n  private agentFunction?: AgentFunction<any, any, any, any>;\n  public readonly timeout?: number; // msec\n  public readonly priority: number;\n  public error?: Error;\n  public transactionId: undefined | number; // To reject callbacks from timed-out transactions\n  private readonly passThrough?: PassThrough;\n\n  public readonly anyInput: boolean; // any input makes this node ready\n  public dataSources: DataSource[] = []; // no longer needed. This is for transaction log.\n  private inputs?: Record<string, any>;\n  private output?: Record<string, any>;\n  public pendings: Set<string>; // List of nodes this node is waiting data from.\n  private ifSource?: DataSource; // conditional execution\n  private unlessSource?: DataSource; // conditional execution\n  private defaultValue?: ResultData;\n  private isSkip: boolean = false;\n  private debugInfo?: AgentFunctionContextDebugInfo;\n  public readonly isStaticNode = false;\n  public readonly isComputedNode = true;\n\n  constructor(graphId: string, nodeId: string, data: ComputedNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.graphId = graphId;\n    this.params = data.params ?? {};\n    this.console = data.console ?? {};\n    this.filterParams = data.filterParams ?? {};\n    this.passThrough = data.passThrough;\n    this.retryLimit = data.retry ?? graph.retryLimit ?? 0;\n    this.timeout = data.timeout;\n    this.isResult = data.isResult ?? false;\n    this.priority = data.priority ?? 0;\n\n    assert([\"function\", \"string\"].includes(typeof data.agent), \"agent must be either string or function\");\n    if (typeof data.agent === \"string\") {\n      this.agentId = data.agent;\n    } else {\n      const agent = data.agent;\n      this.agentFunction = async ({ namedInputs, params }) => agent(namedInputs, params);\n    }\n\n    this.anyInput = data.anyInput ?? false;\n    this.inputs = data.inputs;\n    this.output = data.output;\n    this.dataSources = [\n      ...(data.inputs ? inputs2dataSources(data.inputs).flat(10) : []),\n      // ...(data.params ? inputs2dataSources(data.params).flat(10) : []),\n      ...(this.agentId ? [parseNodeName(this.agentId)] : []),\n      ...(data.passThrough ? inputs2dataSources(data.passThrough).flat(10) : []),\n    ];\n    if (data.inputs && Array.isArray(data.inputs)) {\n      throw new Error(`array inputs have been deprecated. nodeId: ${nodeId}: see https://github.com/receptron/graphai/blob/main/docs/NamedInputs.md`);\n    }\n\n    this.pendings = new Set(dataSourceNodeIds(this.dataSources));\n    if (data.graph) {\n      this.nestedGraph = typeof data.graph === \"string\" ? this.addPendingNode(data.graph) : data.graph;\n    }\n    if (data.graphLoader && graph.graphLoader) {\n      this.nestedGraph = graph.graphLoader(data.graphLoader);\n    }\n    if (data.if) {\n      this.ifSource = this.addPendingNode(data.if);\n    }\n    if (data.unless) {\n      this.unlessSource = this.addPendingNode(data.unless);\n    }\n    if (data.defaultValue) {\n      this.defaultValue = data.defaultValue;\n    }\n    this.isSkip = false;\n    this.log.initForComputedNode(this, graph);\n  }\n\n  public getAgentId() {\n    return this.agentId ?? \"__custom__function\"; // only for display purpose in the log.\n  }\n\n  private getConfig(hasGraphData: boolean, agentId?: string) {\n    if (agentId) {\n      if (hasGraphData) {\n        return this.graph.config;\n      }\n      const config = this.graph.config ?? {};\n      return {\n        ...(config[\"global\"] ?? {}),\n        ...(config[agentId] ?? {}),\n      };\n    }\n    return {};\n  }\n\n  private addPendingNode(nodeId: string) {\n    const source = parseNodeName(nodeId);\n    assert(!!source.nodeId, `Invalid data source ${nodeId}`);\n    this.pendings.add(source.nodeId);\n    return source;\n  }\n\n  private updateState(state: NodeState) {\n    this.state = state;\n    if (this.debugInfo) {\n      this.debugInfo.state = state;\n    }\n  }\n\n  public resetPending() {\n    this.pendings.clear();\n    if (this.state === NodeState.Executing) {\n      this.updateState(NodeState.Abort);\n    }\n    if (this.debugInfo && this.debugInfo.subGraphs) {\n      this.debugInfo.subGraphs.forEach((graph) => graph.abort(true));\n    }\n  }\n\n  public isReadyNode() {\n    if (this.state !== NodeState.Waiting || this.pendings.size !== 0) {\n      return false;\n    }\n    this.isSkip = !!(\n      (this.ifSource && !isLogicallyTrue(this.graph.resultOf(this.ifSource))) ||\n      (this.unlessSource && isLogicallyTrue(this.graph.resultOf(this.unlessSource)))\n    );\n\n    if (this.isSkip && this.defaultValue === undefined) {\n      this.updateState(NodeState.Skipped);\n      this.log.onSkipped(this, this.graph);\n      return false;\n    }\n    return true;\n  }\n\n  // This private method (only called while executing execute()) performs\n  // the \"retry\" if specified. The transaction log must be updated before\n  // callling this method.\n  private retry(state: NodeState, error: Error) {\n    this.updateState(state); // this.execute() will update to NodeState.Executing\n    this.log.onError(this, this.graph, error.message);\n\n    if (this.retryCount < this.retryLimit) {\n      this.retryCount++;\n      this.execute();\n    } else {\n      this.result = undefined;\n      this.error = error;\n      this.transactionId = undefined; // This is necessary for timeout case\n      this.graph.onExecutionComplete(this);\n    }\n  }\n\n  private checkDataAvailability() {\n    return Object.values(this.graph.resultsOf(this.inputs))\n      .flat()\n      .some((result) => result !== undefined);\n  }\n\n  // This method is called right before the Graph add this node to the task manager.\n  public beforeAddTask() {\n    this.updateState(NodeState.Queued);\n    this.log.beforeAddTask(this, this.graph);\n  }\n\n  // This method is called when the data became available on one of nodes,\n  // which this node needs data from.\n  public removePending(nodeId: string) {\n    if (this.anyInput) {\n      if (this.checkDataAvailability()) {\n        this.pendings.clear();\n      }\n    } else {\n      this.pendings.delete(nodeId);\n    }\n  }\n\n  private isCurrentTransaction(transactionId: number) {\n    return this.transactionId === transactionId;\n  }\n\n  // This private method (called only fro execute) checks if the callback from\n  // the timer came before the completion of agent function call, record it\n  // and attempt to retry (if specified).\n  private executeTimeout(transactionId: number) {\n    if (this.state === NodeState.Executing && this.isCurrentTransaction(transactionId)) {\n      GraphAILogger.warn(`-- timeout ${this.timeout} with ${this.nodeId}`);\n      this.retry(NodeState.TimedOut, Error(\"Timeout\"));\n    }\n  }\n\n  // Check if we need to apply this filter to this node or not.\n  private shouldApplyAgentFilter(agentFilter: AgentFilterInfo, agentId?: string) {\n    if (agentFilter.agentIds && Array.isArray(agentFilter.agentIds) && agentFilter.agentIds.length > 0) {\n      if (agentId && agentFilter.agentIds.includes(agentId)) {\n        return true;\n      }\n    }\n    if (agentFilter.nodeIds && Array.isArray(agentFilter.nodeIds) && agentFilter.nodeIds.length > 0) {\n      if (agentFilter.nodeIds.includes(this.nodeId)) {\n        return true;\n      }\n    }\n    return !agentFilter.agentIds && !agentFilter.nodeIds;\n  }\n\n  private agentFilterHandler(context: AgentFunctionContext, agentFunction: AgentFunction, agentId?: string): Promise<ResultData> {\n    let index = 0;\n\n    const next = (innerContext: AgentFunctionContext): Promise<ResultData> => {\n      const agentFilter = this.graph.agentFilters[index++];\n      if (agentFilter) {\n        if (this.shouldApplyAgentFilter(agentFilter, agentId)) {\n          if (agentFilter.filterParams) {\n            innerContext.filterParams = { ...agentFilter.filterParams, ...innerContext.filterParams };\n          }\n          return agentFilter.agent(innerContext, next);\n        }\n        return next(innerContext);\n      }\n      return agentFunction(innerContext);\n    };\n\n    return next(context);\n  }\n\n  // This method is called when this computed node became ready to run.\n  // It asynchronously calls the associated with agent function and set the result,\n  // then it removes itself from the \"running node\" list of the graph.\n  // Notice that setting the result of this node may make other nodes ready to run.\n  public async execute() {\n    if (this.isSkip) {\n      this.afterExecute(this.defaultValue, []);\n      return;\n    }\n    const previousResults = this.graph.resultsOf(this.inputs, this.anyInput);\n    const agentId = this.agentId ? (this.graph.resultOf(parseNodeName(this.agentId)) as string) : this.agentId;\n    if (typeof agentId === \"function\") {\n      this.agentFunction = agentId;\n    }\n    const hasNestedGraph = Boolean(this.nestedGraph) || Boolean(agentId && this.graph.getAgentFunctionInfo(agentId).hasGraphData);\n    const config: ConfigData | undefined = this.getConfig(hasNestedGraph, agentId);\n\n    const transactionId = Date.now();\n    this.prepareExecute(transactionId, Object.values(previousResults));\n\n    if (this.timeout && this.timeout > 0) {\n      setTimeout(() => {\n        this.executeTimeout(transactionId);\n      }, this.timeout);\n    }\n\n    try {\n      const agentFunction = this.agentFunction ?? this.graph.getAgentFunctionInfo(agentId).agent;\n      const localLog: TransactionLog[] = [];\n      const context = this.getContext(previousResults, localLog, agentId, config);\n\n      // NOTE: We use the existence of graph object in the agent-specific params to determine\n      // if this is a nested agent or not.\n      if (hasNestedGraph) {\n        this.graph.taskManager.prepareForNesting();\n        context.forNestedGraph = {\n          graphData: this.nestedGraph\n            ? \"nodes\" in this.nestedGraph\n              ? this.nestedGraph\n              : (this.graph.resultOf(this.nestedGraph) as GraphData) // HACK: compiler work-around\n            : { version: 0, nodes: {} },\n          agents: this.graph.agentFunctionInfoDictionary,\n          graphOptions: {\n            agentFilters: this.graph.agentFilters,\n            taskManager: this.graph.taskManager,\n            bypassAgentIds: this.graph.bypassAgentIds,\n            config,\n            graphLoader: this.graph.graphLoader,\n          },\n          onLogCallback: this.graph.onLogCallback,\n          callbacks: this.graph.callbacks,\n        };\n      }\n\n      this.beforeConsoleLog(context);\n      const result = await this.agentFilterHandler(context as AgentFunctionContext, agentFunction, agentId);\n      this.afterConsoleLog(result);\n\n      if (hasNestedGraph) {\n        this.graph.taskManager.restoreAfterNesting();\n      }\n\n      if (!this.isCurrentTransaction(transactionId)) {\n        // This condition happens when the agent function returns\n        // after the timeout (either retried or not).\n        GraphAILogger.log(`-- transactionId mismatch with ${this.nodeId} (probably timeout)`);\n        return;\n      }\n\n      // after process\n      this.afterExecute(result, localLog);\n    } catch (error) {\n      this.errorProcess(error, transactionId, previousResults);\n    }\n  }\n\n  private afterExecute(result: ResultData, localLog: TransactionLog[]) {\n    if (this.state == NodeState.Abort) {\n      return;\n    }\n    this.updateState(NodeState.Completed);\n    this.result = this.getResult(result);\n    if (this.output) {\n      this.result = resultsOf(this.output, { self: this }, this.graph.propFunctions, true);\n      if (this.passThrough) {\n        this.result = { ...this.result, ...this.graph.resultsOf(this.passThrough) };\n      }\n    }\n    this.log.onComplete(this, this.graph, localLog);\n\n    this.onSetResult();\n\n    this.graph.onExecutionComplete(this);\n  }\n\n  // This private method (called only by execute()) prepares the ComputedNode object\n  // for execution, and create a new transaction to record it.\n  private prepareExecute(transactionId: number, inputs: Array<ResultData>) {\n    this.updateState(NodeState.Executing);\n    this.log.beforeExecute(this, this.graph, transactionId, inputs);\n    this.transactionId = transactionId;\n  }\n\n  // This private method (called only by execute) processes an error received from\n  // the agent function. It records the error in the transaction log and handles\n  // the retry if specified.\n  private errorProcess(error: unknown, transactionId: number, namedInputs: DefaultInputData) {\n    if (error instanceof Error && error.message !== strIntentionalError) {\n      GraphAILogger.error(`<-- NodeId: ${this.nodeId}, Agent: ${this.agentId}`);\n      GraphAILogger.error({ namedInputs });\n      GraphAILogger.error(error);\n      GraphAILogger.error(\"-->\");\n    }\n    if (!this.isCurrentTransaction(transactionId)) {\n      GraphAILogger.warn(`-- transactionId mismatch with ${this.nodeId} (not timeout)`);\n      return;\n    }\n\n    if (error instanceof Error) {\n      this.retry(NodeState.Failed, error);\n    } else {\n      GraphAILogger.error(`-- NodeId: ${this.nodeId}: Unknown error was caught`);\n      this.retry(NodeState.Failed, Error(\"Unknown\"));\n    }\n  }\n\n  private getContext(previousResults: Record<string, ResultData | undefined>, localLog: TransactionLog[], agentId?: string, config?: ConfigData) {\n    // Pass debugInfo by reference, and the state of this node will be received by agent/agentFilter.\n    // From graphAgent(nested, map), set the instance of graphai, and use abort on the child graphai.\n    this.debugInfo = this.getDebugInfo(agentId);\n    const params = {\n      ...(this.params ?? {}),\n      ...(isNamedInputs(previousResults?.params) ? previousResults?.params : {}),\n    };\n    const context: AgentFunctionContext<DefaultParamsType, DefaultInputData | string | number | boolean | undefined> = {\n      //params: this.graph.resultsOf(this.params),\n      params,\n      namedInputs: previousResults,\n      inputSchema: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(agentId)?.inputs,\n      debugInfo: this.debugInfo,\n      cacheType: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(agentId)?.cacheType,\n      filterParams: this.filterParams,\n      config,\n      log: localLog,\n    };\n    return context;\n  }\n\n  private getResult(result: ResultData) {\n    if (result && this.passThrough) {\n      if (isObject(result) && !Array.isArray(result)) {\n        return { ...result, ...this.graph.resultsOf(this.passThrough) };\n      } else if (Array.isArray(result)) {\n        return result.map((r) => (isObject(r) && !Array.isArray(r) ? { ...r, ...this.graph.resultsOf(this.passThrough) } : r));\n      }\n    }\n    return result;\n  }\n\n  private getDebugInfo(agentId?: string) {\n    return {\n      nodeId: this.nodeId,\n      agentId,\n      retry: this.retryCount,\n      state: this.state,\n      subGraphs: new Map(),\n      verbose: this.graph.verbose,\n      version: this.graph.version,\n      isResult: this.isResult,\n    };\n  }\n\n  private beforeConsoleLog(context: AgentFunctionContext<DefaultParamsType, string | number | boolean | DefaultInputData | undefined>) {\n    if (this.console === false) {\n      return;\n    } else if (this.console === true || this.console.before === true) {\n      GraphAILogger.log(JSON.stringify(context.namedInputs, null, 2));\n    } else if (this.console.before) {\n      GraphAILogger.log(this.console.before);\n    }\n  }\n}\n\nexport class StaticNode extends Node {\n  public value?: ResultData;\n  public readonly update?: DataSource;\n  public readonly isResult: boolean;\n  public readonly isStaticNode = true;\n  public readonly isComputedNode = false;\n\n  constructor(nodeId: string, data: StaticNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.value = data.value;\n    this.update = data.update ? parseNodeName(data.update) : undefined;\n    this.isResult = data.isResult ?? false;\n    this.console = data.console ?? {};\n  }\n\n  public updateValue(value: ResultData, injectFrom?: string) {\n    this.value = value;\n    this.log.onInjected(this, this.graph, injectFrom);\n  }\n  public setResultValue(injectFrom?: string) {\n    this.state = NodeState.Injected;\n    this.result = this.value;\n    this.log.onInjected(this, this.graph, injectFrom);\n    this.onSetResult();\n  }\n\n  public consoleLog() {\n    this.afterConsoleLog(this.result);\n  }\n}\n\nexport type GraphNodes = Record<string, ComputedNode | StaticNode>;\n","export const graphDataAttributeKeys = [\"nodes\", \"concurrency\", \"agentId\", \"loop\", \"verbose\", \"version\", \"metadata\"];\n\nexport const computedNodeAttributeKeys = [\n  \"inputs\",\n  \"output\",\n  \"anyInput\",\n  \"params\",\n  \"retry\",\n  \"timeout\",\n  \"agent\",\n  \"graph\",\n  \"graphLoader\",\n  \"isResult\",\n  \"priority\",\n  \"if\",\n  \"unless\",\n  \"defaultValue\",\n  \"filterParams\",\n  \"console\",\n  \"passThrough\",\n];\nexport const staticNodeAttributeKeys = [\"value\", \"update\", \"isResult\", \"console\"];\n\nexport class ValidationError extends Error {\n  constructor(message: string) {\n    super(`\\x1b[41m${message}\\x1b[0m`); // Pass the message to the base Error class\n\n    // Set the prototype explicitly to ensure correct prototype chain\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n","import { GraphData } from \"../type\";\nimport { graphDataAttributeKeys, ValidationError } from \"./common\";\n\nexport const graphNodesValidator = (data: GraphData) => {\n  if (data.nodes === undefined) {\n    throw new ValidationError(\"Invalid Graph Data: no nodes\");\n  }\n  if (typeof data.nodes !== \"object\") {\n    throw new ValidationError(\"Invalid Graph Data: invalid nodes\");\n  }\n  if (Array.isArray(data.nodes)) {\n    throw new ValidationError(\"Invalid Graph Data: nodes must be object\");\n  }\n  if (Object.keys(data.nodes).length === 0) {\n    throw new ValidationError(\"Invalid Graph Data: nodes is empty\");\n  }\n  Object.keys(data).forEach((key) => {\n    if (!graphDataAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Graph Data does not allow \" + key);\n    }\n  });\n};\nexport const graphDataValidator = (data: GraphData) => {\n  if (data.loop) {\n    if (data.loop.count === undefined && data.loop.while === undefined) {\n      throw new ValidationError(\"Loop: Either count or while is required in loop\");\n    }\n    if (data.loop.count !== undefined && data.loop.while !== undefined) {\n      throw new ValidationError(\"Loop: Both count and while cannot be set\");\n    }\n  }\n  if (data.concurrency !== undefined) {\n    if (!Number.isInteger(data.concurrency)) {\n      throw new ValidationError(\"Concurrency must be an integer\");\n    }\n    if (data.concurrency < 1) {\n      throw new ValidationError(\"Concurrency must be a positive integer\");\n    }\n  }\n};\n","import { NodeData, StaticNodeData, ComputedNodeData } from \"../type\";\nimport { ValidationError } from \"./common\";\n\nexport const nodeValidator = (nodeData: NodeData) => {\n  if ((nodeData as ComputedNodeData).agent && (nodeData as StaticNodeData).value) {\n    throw new ValidationError(\"Cannot set both agent and value\");\n  }\n  // if (!(\"agent\" in nodeData) && !(\"value\" in nodeData)) {\n  //   throw new ValidationError(\"Either agent or value is required\");\n  // }\n  return true;\n};\n","import { StaticNodeData } from \"../type\";\nimport { staticNodeAttributeKeys, ValidationError } from \"./common\";\n\nexport const staticNodeValidator = (nodeData: StaticNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!staticNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Static node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ComputedNodeData } from \"../type\";\nimport { computedNodeAttributeKeys, ValidationError } from \"./common\";\n\nexport const computedNodeValidator = (nodeData: ComputedNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!computedNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Computed node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { GraphData } from \"../type\";\nimport { parseNodeName, isComputedNodeData, isStaticNodeData } from \"../utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"../utils/nodeUtils\";\nimport { ValidationError } from \"./common\";\n\nexport const relationValidator = (graphData: GraphData, staticNodeIds: string[], computedNodeIds: string[]) => {\n  const nodeIds = new Set<string>(Object.keys(graphData.nodes));\n\n  const pendings: Record<string, Set<string>> = {};\n  const waitlist: Record<string, Set<string>> = {};\n\n  // validate input relation and set pendings and wait list\n  computedNodeIds.forEach((computedNodeId) => {\n    const nodeData = graphData.nodes[computedNodeId];\n    pendings[computedNodeId] = new Set<string>();\n\n    const dataSourceValidator = (sourceType: string, sourceNodeIds: string[]) => {\n      sourceNodeIds.forEach((sourceNodeId) => {\n        if (sourceNodeId) {\n          if (!nodeIds.has(sourceNodeId)) {\n            throw new ValidationError(`${sourceType} not match: NodeId ${computedNodeId}, Inputs: ${sourceNodeId}`);\n          }\n          waitlist[sourceNodeId] === undefined && (waitlist[sourceNodeId] = new Set<string>());\n          pendings[computedNodeId].add(sourceNodeId);\n          waitlist[sourceNodeId].add(computedNodeId);\n        }\n      });\n    };\n    if (nodeData && isComputedNodeData(nodeData)) {\n      if (nodeData.inputs) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.inputs));\n        dataSourceValidator(\"Inputs\", sourceNodeIds);\n      }\n      /*\n      if (nodeData.params) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.params));\n        dataSourceValidator(\"Params\", sourceNodeIds);\n      }\n      */\n      if (nodeData.if) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ if: nodeData.if }));\n        dataSourceValidator(\"If\", sourceNodeIds);\n      }\n      if (nodeData.unless) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ unless: nodeData.unless }));\n        dataSourceValidator(\"Unless\", sourceNodeIds);\n      }\n      if (nodeData.graph && typeof nodeData?.graph === \"string\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ graph: nodeData.graph }));\n        dataSourceValidator(\"Graph\", sourceNodeIds);\n      }\n      if (typeof nodeData.agent === \"string\" && nodeData.agent[0] === \":\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ agent: nodeData.agent }));\n        dataSourceValidator(\"Agent\", sourceNodeIds);\n      }\n    }\n  });\n\n  // TODO. validate update\n  staticNodeIds.forEach((staticNodeId) => {\n    const nodeData = graphData.nodes[staticNodeId];\n    if (isStaticNodeData(nodeData) && nodeData.update) {\n      const update = nodeData.update;\n      const updateNodeId = parseNodeName(update).nodeId;\n      if (!updateNodeId) {\n        throw new ValidationError(\"Update it a literal\");\n      }\n      if (!nodeIds.has(updateNodeId)) {\n        throw new ValidationError(`Update not match: NodeId ${staticNodeId}, update: ${update}`);\n      }\n    }\n  });\n\n  const cycle = (possibles: string[]) => {\n    possibles.forEach((possobleNodeId) => {\n      (waitlist[possobleNodeId] || []).forEach((waitingNodeId) => {\n        pendings[waitingNodeId].delete(possobleNodeId);\n      });\n    });\n\n    const running: string[] = [];\n    Object.keys(pendings).forEach((pendingNodeId) => {\n      if (pendings[pendingNodeId].size === 0) {\n        running.push(pendingNodeId);\n        delete pendings[pendingNodeId];\n      }\n    });\n    return running;\n  };\n\n  let runningQueue = cycle(staticNodeIds);\n  if (runningQueue.length === 0) {\n    throw new ValidationError(\"No Initial Runnning Node\");\n  }\n\n  do {\n    runningQueue = cycle(runningQueue);\n  } while (runningQueue.length > 0);\n\n  if (Object.keys(pendings).length > 0) {\n    throw new ValidationError(\"Some nodes are not executed: \" + Object.keys(pendings).join(\", \"));\n  }\n};\n","import { ValidationError } from \"./common\";\n\nexport const agentValidator = (graphAgentIds: Set<string>, agentIds: Set<string>) => {\n  graphAgentIds.forEach((agentId) => {\n    // agentId or dynamic agentId\n    if (!agentIds.has(agentId) && agentId[0] !== \":\") {\n      throw new ValidationError(\"Invalid Agent : \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n    }\n  });\n  return true;\n};\n","import { GraphData, AgentFunctionInfoDictionary } from \"./type\";\nimport { isStaticNodeData } from \"./utils/utils\";\nimport { graphNodesValidator, graphDataValidator } from \"./validators/graph_data_validator\";\nimport { nodeValidator } from \"./validators/nodeValidator\";\nimport { staticNodeValidator } from \"./validators/static_node_validator\";\nimport { computedNodeValidator } from \"./validators/computed_node_validator\";\nimport { relationValidator } from \"./validators/relation_validator\";\nimport { agentValidator } from \"./validators/agent_validator\";\n\nimport { ValidationError } from \"./validators/common\";\n\nexport const validateGraphData = (data: GraphData, agentIds: string[]) => {\n  graphNodesValidator(data);\n  graphDataValidator(data);\n  const computedNodeIds: string[] = [];\n  const staticNodeIds: string[] = [];\n  const graphAgentIds = new Set<string>();\n  Object.keys(data.nodes).forEach((nodeId) => {\n    const node = data.nodes[nodeId];\n    const isStaticNode = isStaticNodeData(node);\n    nodeValidator(node);\n    const agentId = isStaticNode ? \"\" : node.agent;\n    isStaticNode && staticNodeValidator(node) && staticNodeIds.push(nodeId);\n    !isStaticNode && computedNodeValidator(node) && computedNodeIds.push(nodeId) && typeof agentId === \"string\" && graphAgentIds.add(agentId);\n  });\n  agentValidator(graphAgentIds, new Set<string>(agentIds));\n  relationValidator(data, staticNodeIds, computedNodeIds);\n\n  return true;\n};\n\nexport const validateAgent = (agentFunctionInfoDictionary: AgentFunctionInfoDictionary) => {\n  Object.keys(agentFunctionInfoDictionary).forEach((agentId: string) => {\n    if (agentId !== \"default\") {\n      const agentInfo = agentFunctionInfoDictionary[agentId];\n      if (!agentInfo || !agentInfo.agent) {\n        throw new ValidationError(\"No Agent: \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n      }\n    }\n  });\n};\n","import { ComputedNode } from \"./node\";\nimport { assert } from \"./utils/utils\";\n\ntype TaskEntry = {\n  node: ComputedNode;\n  graphId: string;\n  callback: (node: ComputedNode) => void;\n};\n\n// TaskManage object controls the concurrency of ComputedNode execution.\n//\n// NOTE: A TaskManager instance will be shared between parent graph and its children\n// when nested agents are involved.\nexport class TaskManager {\n  private concurrency: number;\n  private taskQueue: Array<TaskEntry> = [];\n  private runningNodes = new Set<ComputedNode>();\n\n  constructor(concurrency: number) {\n    this.concurrency = concurrency;\n  }\n\n  // This internal method dequeus a task from the task queue\n  // and call the associated callback method, if the number of\n  // running task is lower than the spcified limit.\n  private dequeueTaskIfPossible() {\n    if (this.runningNodes.size < this.concurrency) {\n      const task = this.taskQueue.shift();\n      if (task) {\n        this.runningNodes.add(task.node);\n        task.callback(task.node);\n      }\n    }\n  }\n\n  // Node will call this method to put itself in the execution queue.\n  // We call the associated callback function when it is dequeued.\n  public addTask(node: ComputedNode, graphId: string, callback: (node: ComputedNode) => void) {\n    // Finder tasks in the queue, which has either the same or higher priority.\n    const count = this.taskQueue.filter((task) => {\n      return task.node.priority >= node.priority;\n    }).length;\n    assert(count <= this.taskQueue.length, \"TaskManager.addTask: Something is really wrong.\");\n    this.taskQueue.splice(count, 0, { node, graphId, callback });\n    this.dequeueTaskIfPossible();\n  }\n\n  public isRunning(graphId: string) {\n    const count = [...this.runningNodes].filter((node) => {\n      return node.graphId == graphId;\n    }).length;\n    return count > 0 || Array.from(this.taskQueue).filter((data) => data.graphId === graphId).length > 0;\n  }\n\n  // Node MUST call this method once the execution of agent function is completed\n  // either successfully or not.\n  public onComplete(node: ComputedNode) {\n    assert(this.runningNodes.has(node), `TaskManager.onComplete node(${node.nodeId}) is not in list`);\n    this.runningNodes.delete(node);\n    this.dequeueTaskIfPossible();\n  }\n\n  // Node will call this method before it hands the task manager from the graph\n  // to a nested agent. We need to make it sure that there is enough room to run\n  // computed nodes inside the nested graph to avoid a deadlock.\n  public prepareForNesting() {\n    this.concurrency++;\n  }\n\n  public restoreAfterNesting() {\n    this.concurrency--;\n  }\n\n  public getStatus(verbose: boolean = false) {\n    const runningNodes = Array.from(this.runningNodes).map((node) => node.nodeId);\n    const queuedNodes = this.taskQueue.map((task) => task.node.nodeId);\n    const nodes = verbose ? { runningNodes, queuedNodes } : {};\n    return {\n      concurrency: this.concurrency,\n      queue: this.taskQueue.length,\n      running: this.runningNodes.size,\n      ...nodes,\n    };\n  }\n\n  public reset() {\n    this.taskQueue.length = 0;\n    this.runningNodes.clear();\n  }\n}\n","import {\n  AgentFunctionInfoDictionary,\n  AgentFilterInfo,\n  GraphData,\n  DataSource,\n  LoopData,\n  ResultDataDictionary,\n  ResultData,\n  DefaultResultData,\n  GraphOptions,\n  PropFunction,\n  GraphDataLoader,\n  ConfigDataDictionary,\n  CallbackFunction,\n} from \"./type\";\nimport { TransactionLog } from \"./transaction_log\";\n\nimport { ComputedNode, StaticNode, GraphNodes } from \"./node\";\n\nimport { resultsOf, resultOf, cleanResult } from \"./utils/result\";\nimport { propFunctions } from \"./utils/prop_function\";\nimport { parseNodeName, assert, isLogicallyTrue, isComputedNodeData, loopCounterKey } from \"./utils/utils\";\nimport { getDataFromSource } from \"./utils/data_source\";\n\nimport { validateGraphData, validateAgent } from \"./validator\";\nimport { TaskManager } from \"./task_manager\";\nimport { GraphAILogger } from \"./utils/GraphAILogger\";\n\nexport const defaultConcurrency = 8;\nexport const graphDataLatestVersion = 0.5;\n\nexport class GraphAI {\n  public readonly version: number;\n  public readonly graphId: string;\n  private readonly graphData: GraphData;\n  private staticNodeInitData: Record<string, ResultData> = {};\n  private readonly loop?: LoopData;\n  private readonly forceLoop: boolean;\n  private readonly logs: Array<TransactionLog> = [];\n  public readonly bypassAgentIds: string[];\n  public readonly config?: ConfigDataDictionary = {};\n  public readonly agentFunctionInfoDictionary: AgentFunctionInfoDictionary;\n  public readonly taskManager: TaskManager;\n  public readonly agentFilters: AgentFilterInfo[];\n  public readonly retryLimit?: number;\n  public readonly propFunctions: PropFunction[];\n  public readonly graphLoader?: GraphDataLoader;\n\n  public nodes: GraphNodes;\n  public onLogCallback: CallbackFunction = (__log: TransactionLog, __isUpdate: boolean) => {};\n  public callbacks: CallbackFunction[] = [];\n  public verbose: boolean; // REVIEW: Do we need this?\n\n  private onComplete: (isAbort: boolean) => void;\n  private repeatCount = 0;\n\n  // This method is called when either the GraphAI obect was created,\n  // or we are about to start n-th iteration (n>2).\n  private createNodes(graphData: GraphData) {\n    const nodes = Object.keys(graphData.nodes).reduce((_nodes: GraphNodes, nodeId: string) => {\n      const nodeData = graphData.nodes[nodeId];\n      if (isComputedNodeData(nodeData)) {\n        _nodes[nodeId] = new ComputedNode(this.graphId, nodeId, nodeData, this);\n      } else {\n        const updateValue = this.staticNodeInitData[nodeId];\n        _nodes[nodeId] = new StaticNode(nodeId, updateValue !== undefined ? { ...nodeData, value: updateValue } : nodeData, this);\n      }\n      return _nodes;\n    }, {});\n\n    // Generate the waitlist for each node.\n    Object.keys(nodes).forEach((nodeId) => {\n      const node = nodes[nodeId];\n      if (node.isComputedNode) {\n        node.pendings.forEach((pending) => {\n          if (nodes[pending]) {\n            nodes[pending].waitlist.add(nodeId); // previousNode\n          } else {\n            throw new Error(`createNode: invalid input ${pending} for node, ${nodeId}`);\n          }\n        });\n      }\n    });\n    return nodes;\n  }\n\n  private getValueFromResults(source: DataSource, results: ResultDataDictionary<DefaultResultData>) {\n    return getDataFromSource(source.nodeId ? results[source.nodeId] : undefined, source, this.propFunctions);\n  }\n\n  // for static\n  private setStaticNodeResults(enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.graphData.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const value = node?.value;\n        if (value !== undefined) {\n          node.setResultValue(nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  private updateStaticNodes(previousResults?: ResultDataDictionary<DefaultResultData>, enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.graphData.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const update = node?.update;\n        if (update && previousResults) {\n          const result = this.getValueFromResults(update, previousResults);\n          this.updateStaticNodeValue(nodeId, result, update.nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  constructor(\n    graphData: GraphData,\n    agentFunctionInfoDictionary: AgentFunctionInfoDictionary,\n    options: GraphOptions = {\n      taskManager: undefined,\n      agentFilters: [],\n      bypassAgentIds: [],\n      config: {},\n      graphLoader: undefined,\n      forceLoop: false,\n    },\n  ) {\n    if (!graphData.version && !options.taskManager) {\n      GraphAILogger.warn(\"------------ missing version number\");\n    }\n    this.version = graphData.version ?? graphDataLatestVersion;\n    if (this.version < graphDataLatestVersion) {\n      GraphAILogger.warn(`------------ upgrade to ${graphDataLatestVersion}!`);\n    }\n    this.retryLimit = graphData.retry; // optional\n    this.graphId = `${Date.now().toString(36)}-${Math.random().toString(36).substr(2, 9)}`; // URL.createObjectURL(new Blob()).slice(-36);\n    this.agentFunctionInfoDictionary = agentFunctionInfoDictionary;\n    this.propFunctions = propFunctions;\n    this.taskManager = options.taskManager ?? new TaskManager(graphData.concurrency ?? defaultConcurrency);\n    this.agentFilters = options.agentFilters ?? [];\n    this.bypassAgentIds = options.bypassAgentIds ?? [];\n    this.config = options.config;\n    this.graphLoader = options.graphLoader;\n    this.forceLoop = options.forceLoop ?? false;\n    this.loop = graphData.loop;\n    this.verbose = graphData.verbose === true;\n    this.onComplete = (__isAbort: boolean) => {\n      throw new Error(\"SOMETHING IS WRONG: onComplete is called without run()\");\n    };\n\n    validateGraphData(graphData, [...Object.keys(agentFunctionInfoDictionary), ...this.bypassAgentIds]);\n    validateAgent(agentFunctionInfoDictionary);\n\n    this.graphData = {\n      ...graphData,\n      nodes: {\n        ...graphData.nodes,\n        [loopCounterKey]: { value: 0, update: `:${loopCounterKey}.add(1)` },\n      },\n    };\n    this.nodes = this.createNodes(this.graphData);\n  }\n\n  public getAgentFunctionInfo(agentId?: string) {\n    if (agentId && this.agentFunctionInfoDictionary[agentId]) {\n      return this.agentFunctionInfoDictionary[agentId];\n    }\n    if (agentId && this.bypassAgentIds.includes(agentId)) {\n      return {\n        agent: async () => {\n          return null;\n        },\n        hasGraphData: false,\n        inputs: null,\n        cacheType: undefined, // for node.getContext\n      };\n    }\n    // We are not supposed to hit this error because the validator will catch it.\n    throw new Error(\"No agent: \" + agentId);\n  }\n\n  public asString() {\n    return Object.values(this.nodes)\n      .map((node) => node.asString())\n      .join(\"\\n\");\n  }\n\n  // Public API\n  public results<T = DefaultResultData>(all: boolean, internalUse: boolean = false): ResultDataDictionary<T> {\n    return Object.keys(this.nodes)\n      .filter((nodeId) => (all && (internalUse || nodeId !== loopCounterKey)) || this.nodes[nodeId].isResult)\n      .reduce((results: ResultDataDictionary<T>, nodeId) => {\n        const node = this.nodes[nodeId];\n        if (node.result !== undefined) {\n          results[nodeId] = node.result as T;\n        }\n        return results;\n      }, {});\n  }\n\n  // Public API\n  public errors(): Record<string, Error> {\n    return Object.keys(this.nodes).reduce((errors: Record<string, Error>, nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        if (node.error !== undefined) {\n          errors[nodeId] = node.error;\n        }\n      }\n      return errors;\n    }, {});\n  }\n\n  private pushReadyNodesIntoQueue() {\n    // Nodes without pending data should run immediately.\n    Object.keys(this.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        this.pushQueueIfReady(node);\n      }\n    });\n  }\n\n  private pushQueueIfReady(node: ComputedNode) {\n    if (node.isReadyNode()) {\n      this.pushQueue(node);\n    }\n  }\n\n  public pushQueueIfReadyAndRunning(node: ComputedNode) {\n    if (this.isRunning()) {\n      this.pushQueueIfReady(node);\n    }\n  }\n\n  // for computed\n  public pushQueue(node: ComputedNode) {\n    node.beforeAddTask();\n\n    this.taskManager.addTask(node, this.graphId, (_node) => {\n      assert(node.nodeId === _node.nodeId, \"GraphAI.pushQueue node mismatch\");\n      node.execute();\n    });\n  }\n\n  // Public API\n  public async run<T = DefaultResultData>(all: boolean = false): Promise<ResultDataDictionary<T>> {\n    this.setStaticNodeResults();\n\n    const invalidStaticNodes = Object.values(this.nodes)\n      .filter((node) => node.isStaticNode)\n      .filter((node) => node.result === undefined && node.update === undefined);\n\n    if (invalidStaticNodes.length > 0) {\n      const nodeIds = invalidStaticNodes.map((node) => node.nodeId).join(\", \");\n      throw new Error(`Static node(s) must have value. Set value, injectValue, or set update. Affected nodeIds: ${nodeIds}`);\n    }\n    if (this.isRunning()) {\n      throw new Error(\"This GraphAI instance is already running\");\n    }\n\n    this.pushReadyNodesIntoQueue();\n\n    if (!this.isRunning()) {\n      GraphAILogger.warn(\"-- nothing to execute\");\n      return {};\n    }\n\n    return new Promise((resolve, reject) => {\n      this.onComplete = (isAbort: boolean = false) => {\n        const errors = this.errors();\n        const errorNodeIds = Object.keys(errors);\n        if (errorNodeIds.length > 0 || isAbort) {\n          reject(errors[errorNodeIds[0]]);\n        } else {\n          resolve(this.results(all));\n        }\n      };\n    });\n  }\n\n  public abort(isChild = false) {\n    if (this.isRunning()) {\n      this.resetPending();\n      // Stop All Running node.\n    }\n    // For an agent like an event agent, where an external promise remains unresolved,\n    // aborting and then retrying can cause nodes or the graph to execute again.\n    // To prevent this, the transactionId is updated to ensure the retry fails.\n    Object.values(this.nodes).forEach((node) => node.isComputedNode && (node.transactionId = undefined));\n    if (!isChild) {\n      this.taskManager.reset();\n    }\n    this.onComplete(this.isRunning());\n  }\n  public resetPending() {\n    Object.values(this.nodes).map((node) => {\n      if (node.isComputedNode) {\n        node.resetPending();\n      }\n    });\n  }\n\n  // Public only for testing\n  public isRunning() {\n    return this.taskManager.isRunning(this.graphId);\n  }\n\n  // callback from execute\n  public onExecutionComplete(node: ComputedNode) {\n    this.taskManager.onComplete(node);\n    if (this.isRunning() || this.processLoopIfNecessary()) {\n      return; // continue running\n    }\n    this.onComplete(false); // Nothing to run. Finish it.\n  }\n\n  // Must be called only from onExecutionComplete righ after removeRunning\n  // Check if there is any running computed nodes.\n  // In case of no running computed note, start the another iteration if ncessary (loop)\n  private processLoopIfNecessary() {\n    //\n    if (!this.forceLoop && Object.keys(this.errors()).length > 0) {\n      return false;\n    }\n\n    this.repeatCount++;\n    const loop = this.loop;\n    if (!loop) {\n      return false;\n    }\n\n    // We need to update static nodes, before checking the condition\n    const previousResults = this.results(true, true); // results from previous loop\n    this.updateStaticNodes(previousResults);\n    this.setStaticNodeResults();\n\n    if (loop.count === undefined || this.repeatCount < loop.count) {\n      if (loop.while) {\n        const source = parseNodeName(loop.while);\n        const value = this.getValueFromResults(source, this.results(true, true));\n        // NOTE: We treat an empty array as false.\n        if (!isLogicallyTrue(value)) {\n          return false; // while condition is not met\n        }\n      }\n      this.nodes = this.createNodes(this.graphData);\n      this.updateStaticNodes(previousResults, true);\n      this.setStaticNodeResults();\n\n      this.pushReadyNodesIntoQueue();\n      return true; // Indicating that we are going to continue.\n    }\n    return false;\n  }\n\n  public initializeGraphAI() {\n    if (this.isRunning()) {\n      throw new Error(\"This GraphAI instance is running\");\n    }\n    this.nodes = this.createNodes(this.graphData);\n    this.setStaticNodeResults();\n  }\n  public setPreviousResults(previousResults: ResultDataDictionary<DefaultResultData>) {\n    this.updateStaticNodes(previousResults);\n  }\n  public setLoopLog(log: TransactionLog) {\n    log.isLoop = !!this.loop;\n    log.repeatCount = this.repeatCount;\n  }\n\n  public appendLog(log: TransactionLog) {\n    this.logs.push(log);\n    this.onLogCallback(log, false);\n    this.callbacks.forEach((callback) => callback(log, false));\n  }\n\n  public updateLog(log: TransactionLog) {\n    this.onLogCallback(log, true);\n    this.callbacks.forEach((callback) => callback(log, false));\n  }\n\n  public registerCallback(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n\n  public clearCallbacks() {\n    this.callbacks = [];\n  }\n\n  // Public API\n  public transactionLogs() {\n    return this.logs;\n  }\n\n  // Public API\n  public injectValue(nodeId: string, value: ResultData, injectFrom?: string): void {\n    this.staticNodeInitData[nodeId] = value;\n    this.updateStaticNodeValue(nodeId, value, injectFrom);\n  }\n  private updateStaticNodeValue(nodeId: string, value: ResultData, injectFrom?: string): void {\n    const node = this.nodes[nodeId];\n    if (node && node.isStaticNode) {\n      node.updateValue(value, injectFrom);\n    } else {\n      throw new Error(`injectValue with Invalid nodeId, ${nodeId}`);\n    }\n  }\n  public resultsOf(inputs?: Record<string, any>, anyInput: boolean = false) {\n    const results = resultsOf(inputs ?? {}, this.nodes, this.propFunctions);\n    if (anyInput) {\n      return cleanResult(results);\n    }\n    return results;\n  }\n  public resultOf(source: DataSource) {\n    return resultOf(source, this.nodes, this.propFunctions);\n  }\n}\n"],"names":[],"mappings":"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"}