{"version":3,"file":"bundle.cjs.js","sources":["../src/type.ts","../src/utils/GraphAILogger.ts","../src/utils/prop_function.ts","../src/utils/utils.ts","../src/utils/nodeUtils.ts","../src/transaction_log.ts","../src/utils/data_source.ts","../src/utils/result.ts","../src/node.ts","../src/validators/common.ts","../src/validators/graph_data_validator.ts","../src/validator.ts","../src/validators/nodeValidator.ts","../src/validators/static_node_validator.ts","../src/validators/computed_node_validator.ts","../src/validators/agent_validator.ts","../src/validators/relation_validator.ts","../src/task_manager.ts","../src/graphai.ts"],"sourcesContent":["import type { TransactionLog } from \"./transaction_log\";\nimport type { TaskManager } from \"./task_manager\";\nimport type { GraphAI } from \"./graphai\";\n\nexport enum NodeState {\n  Waiting = \"waiting\",\n  Queued = \"queued\",\n  Executing = \"executing\",\n  ExecutingServer = \"executing-server\",\n  Failed = \"failed\",\n  TimedOut = \"timed-out\",\n  Abort = \"abort\",\n  Completed = \"completed\",\n  Injected = \"injected\",\n  Skipped = \"skipped\",\n}\n\nexport type DefaultResultData = Record<string, any> | string | number | boolean | Array<DefaultResultData>;\nexport type DefaultInputData = Record<string, any>;\nexport type DefaultConfigData = Record<string, any>;\nexport type ResultData<ResultType = DefaultResultData> = ResultType | undefined;\nexport type ResultDataDictionary<ResultType = DefaultResultData> = Record<string, ResultData<ResultType>>;\n\nexport type ConfigData<ConfigType = DefaultConfigData> = ConfigType;\nexport type ConfigDataDictionary<ConfigType = DefaultConfigData> = Record<string, ConfigType>;\nexport type DefaultParamsType = Record<string, any>;\nexport type NodeDataParams<ParamsType = DefaultParamsType> = ParamsType; // Agent-specific parameters\n\nexport type PassThrough = Record<string, any>;\n\nexport type DataSource = {\n  nodeId?: string;\n  value?: any;\n  propIds?: string[];\n};\n\ntype ConsoleAttribute = boolean | string | Record<string, any>;\nexport type ConsoleElement = boolean | { before?: ConsoleAttribute; after?: ConsoleAttribute };\n\nexport type StaticNodeData = {\n  value?: ResultData; // initial value for static node.\n  update?: string; // nodeId (+.propId) to get value after a loop\n  isResult?: boolean;\n  console?: ConsoleElement;\n};\nexport type AgentAnonymousFunction = (...params: any[]) => unknown;\n\nexport type AgentFilterParams = Record<string, any>;\n\nexport type GraphDataLoaderOption = { fileName: string; option?: any };\n\nexport type ComputedNodeData = {\n  agent: string | AgentAnonymousFunction;\n  inputs?: Record<string, any>;\n  output?: Record<string, any>;\n  anyInput?: boolean; // any input makes this node ready\n  params?: NodeDataParams;\n  filterParams?: AgentFilterParams; // agent filter\n  retry?: number;\n  timeout?: number; // msec\n  if?: string; // conditional execution\n  unless?: string; // conditional execution\n  defaultValue?: ResultData;\n  graph?: GraphData | string;\n  graphLoader?: GraphDataLoaderOption;\n  isResult?: boolean;\n  priority?: number; // The default is 0.\n  passThrough?: PassThrough; // data that pass trough to result\n  console?: ConsoleElement;\n};\n\nexport type NodeData = StaticNodeData | ComputedNodeData;\n\nexport type LoopData = {\n  count?: number;\n  while?: string | boolean;\n};\n\nexport type GraphData = {\n  version?: number; // major version, 0.1, 0.2, ...\n  nodes: Record<string, NodeData>;\n  concurrency?: number;\n  loop?: LoopData;\n  verbose?: boolean;\n  retry?: number;\n  metadata?: any; // Stores information about GraphData. GraphAI itself is not used this data.\n};\n\nexport type GraphDataLoader = (loaderOption: GraphDataLoaderOption) => GraphData;\n\nexport type GraphOptions = {\n  agentFilters?: AgentFilterInfo[] | undefined;\n  taskManager?: TaskManager | undefined;\n  bypassAgentIds?: string[] | undefined;\n  config?: ConfigDataDictionary;\n  graphLoader?: GraphDataLoader;\n  forceLoop?: boolean;\n};\n\nexport type CacheTypes = \"pureAgent\" | \"impureAgent\";\n\nexport type AgentFunctionContextDebugInfo = {\n  verbose: boolean;\n  nodeId: string;\n  state: string;\n  subGraphs: Map<string, GraphAI>;\n  retry: number;\n  agentId?: string;\n  version?: number;\n  isResult?: boolean;\n};\n\nexport type AgentFunctionContext<ParamsType = DefaultParamsType, NamedInputDataType = DefaultInputData, ConfigType = DefaultConfigData> = {\n  params: NodeDataParams<ParamsType>;\n  inputSchema?: any;\n  namedInputs: NamedInputDataType;\n  debugInfo: AgentFunctionContextDebugInfo;\n  forNestedGraph?: {\n    graphData?: GraphData; // nested graph\n    agents: AgentFunctionInfoDictionary; // for nested graph\n    graphOptions: GraphOptions;\n    onLogCallback?: (log: TransactionLog, isUpdate: boolean) => void;\n    callbacks?: CallbackFunction[];\n  };\n  cacheType?: CacheTypes;\n  filterParams: AgentFilterParams; // agent filter\n  log?: TransactionLog[];\n  config?: ConfigType;\n};\n\nexport type AgentFunction<\n  ParamsType = DefaultParamsType,\n  ResultType = DefaultResultData,\n  NamedInputDataType = DefaultInputData,\n  ConfigType = DefaultConfigData,\n> = (context: AgentFunctionContext<ParamsType, NamedInputDataType, ConfigType>) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterFunction<ParamsType = DefaultParamsType, ResultType = DefaultResultData, NamedInputDataType = DefaultInputData> = (\n  context: AgentFunctionContext<ParamsType, NamedInputDataType>,\n  agent: AgentFunction,\n) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterInfo = {\n  name: string;\n  agent: AgentFilterFunction;\n  agentIds?: string[];\n  nodeIds?: string[];\n  filterParams?: AgentFilterParams;\n};\n\nexport type AgentFunctionInfoSample = {\n  inputs: any;\n  params: DefaultParamsType;\n  result: any;\n  graph?: GraphData;\n  description?: string;\n};\n\nexport type AgentFunctionInfo = {\n  name: string;\n  agent: AgentFunction<any, any, any, any>;\n  mock: AgentFunction<any, any, any, any>;\n  inputs?: any; // inputs data schema\n  output?: any; // output data schema\n  params?: any; // params data schema\n  config?: any; // config data schema\n  outputFormat?: any;\n  tools?: Record<string, any>[]; // function calling(tools) schema.\n  samples: AgentFunctionInfoSample[]; // sample data. This is for document and unit test.\n  description: string;\n  category: string[];\n  author: string;\n  repository: string;\n  source?: string;\n  package?: string;\n  license: string;\n  cacheType?: CacheTypes;\n  environmentVariables?: string[]; // Environment variables required for execution\n  hasGraphData?: boolean; // The agent that executes graph data using nestedAgentGenerator is true\n  stream?: boolean; // is stream support?\n  apiKeys?: string[];\n  npms?: string[];\n};\n\nexport type AgentFunctionInfoDictionary = Record<string, AgentFunctionInfo>;\n\nexport type PropFunction = (result: ResultData, propId: string) => ResultData;\n\nexport type CallbackFunction = (log: TransactionLog, isUpdate: boolean) => void;\n","type LogLevel = \"debug\" | \"info\" | \"log\" | \"warn\" | \"error\";\ntype LoggerFunction = (level: LogLevel, ...args: any[]) => void;\n\nconst enabledLevels: Record<LogLevel, boolean> = {\n  debug: true,\n  info: true,\n  log: true,\n  warn: true,\n  error: true,\n};\n\nlet customLogger: LoggerFunction | null = null;\n\nfunction setLevelEnabled(level: LogLevel, enabled: boolean) {\n  enabledLevels[level] = enabled;\n}\n\nfunction setLogger(logger: LoggerFunction) {\n  customLogger = logger;\n}\n\nfunction output(level: LogLevel, ...args: any[]) {\n  if (!enabledLevels[level]) return;\n  if (customLogger) {\n    customLogger(level, ...args);\n  } else {\n    (console[level] || console.log)(...args);\n  }\n}\n\nfunction debug(...args: any[]) {\n  output(\"debug\", ...args);\n}\nfunction info(...args: any[]) {\n  output(\"info\", ...args);\n}\nfunction log(...args: any[]) {\n  output(\"log\", ...args);\n}\nfunction warn(...args: any[]) {\n  output(\"warn\", ...args);\n}\nfunction error(...args: any[]) {\n  output(\"error\", ...args);\n}\n\nexport const GraphAILogger = {\n  setLevelEnabled,\n  setLogger,\n  debug,\n  info,\n  log,\n  warn,\n  error,\n};\n","import { PropFunction } from \"../type\";\nimport { isObject, loopCounterKey } from \"./utils\";\nimport { GraphNodes } from \"../node\";\nimport { GraphAILogger } from \"./GraphAILogger\";\n\nexport const propFunctionRegex = /^[a-zA-Z]+\\([^)]*\\)$/;\n\nconst propArrayFunction: PropFunction = (result, propId) => {\n  if (Array.isArray(result)) {\n    if (propId === \"length()\") {\n      return result.length;\n    }\n    if (propId === \"flat()\") {\n      return result.flat();\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result, null, 2);\n    }\n    if (propId === \"isEmpty()\") {\n      return result.length === 0;\n    }\n    if (propId === \"average()\" || propId === \"mean()\") {\n      return result.length ? result.reduce((a, b) => a + b, 0) / result.length : 0;\n    }\n    if (propId === \"sum()\") {\n      return result.reduce((a, b) => a + b, 0);\n    }\n    if (propId === \"max()\") {\n      return result.length ? Math.max(...result) : 0;\n    }\n    if (propId === \"min()\") {\n      return result.length ? Math.min(...result) : 0;\n    }\n\n    // array join\n    const matchJoin = propId.match(/^join\\(([,-\\s]?)\\)$/);\n    if (matchJoin && Array.isArray(matchJoin)) {\n      return result.join(matchJoin[1] ?? \"\");\n    }\n  }\n  return undefined;\n};\n\nconst propObjectFunction: PropFunction = (result, propId) => {\n  if (isObject(result)) {\n    if (propId === \"keys()\") {\n      return Object.keys(result);\n    }\n    if (propId === \"values()\") {\n      return Object.values(result);\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result, null, 2);\n    }\n  }\n  return undefined;\n};\n\nconst propStringFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"string\") {\n    if (propId === \"codeBlock()\") {\n      const match = (\"\\n\" + result).match(/\\n```[a-zA-z]*([\\s\\S]*?)\\n```/);\n      if (match) {\n        return match[1];\n      }\n    }\n    if (propId === \"codeBlockOrRaw()\") {\n      const match = (\"\\n\" + result).match(/\\n```[a-zA-z]*([\\s\\S]*?)\\n```/);\n      if (match) {\n        return match[1];\n      }\n      return result;\n    }\n    if (propId === \"jsonParse()\") {\n      return JSON.parse(result);\n    }\n    if (propId === \"toNumber()\") {\n      const ret = Number(result);\n      if (!isNaN(ret)) {\n        return ret;\n      }\n    }\n    if (propId === \"trim()\") {\n      return result.trim();\n    }\n    if (propId === \"toLowerCase()\") {\n      return result.toLowerCase();\n    }\n    if (propId === \"toUpperCase()\") {\n      return result.toUpperCase();\n    }\n    const sliceMatch = propId.match(/^slice\\((-?\\d+)(?:,\\s*(-?\\d+))?\\)/);\n    if (sliceMatch) {\n      if (sliceMatch[2] !== undefined) {\n        return result.slice(Number(sliceMatch[1]), Number(sliceMatch[2]));\n      }\n      if (sliceMatch[1] !== undefined) {\n        return result.slice(Number(sliceMatch[1]));\n      }\n      GraphAILogger.warn(\"slice is not valid format: \" + sliceMatch);\n    }\n\n    const splitMatch = propId.match(/^split\\(([-_:;.,\\s\\n]+)\\)$/);\n    if (splitMatch) {\n      return result.split(splitMatch[1]);\n    }\n  }\n  return undefined;\n};\nconst propNumberFunction: PropFunction = (result, propId) => {\n  if (result !== undefined && Number.isFinite(result)) {\n    if (propId === \"toString()\") {\n      return String(result);\n    }\n    const regex = /^add\\((-?\\d+)\\)$/;\n    const match = propId.match(regex);\n    if (match) {\n      return Number(result) + Number(match[1]);\n    }\n  }\n  return undefined;\n};\nconst propBooleanFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"boolean\") {\n    if (propId === \"not()\") {\n      return !result;\n    }\n  }\n  return undefined;\n};\n\nexport const propFunctions = [propArrayFunction, propObjectFunction, propStringFunction, propNumberFunction, propBooleanFunction];\n\nexport const utilsFunctions = (input: string, nodes: GraphNodes) => {\n  if (input === \"@now\" || input === \"@now_ms\") {\n    return Date.now();\n  }\n  if (input === \"@now_s\") {\n    return Math.floor(Date.now() / 1000);\n  }\n  if (input === \"@loop\") {\n    return nodes[loopCounterKey].result as string;\n  }\n  // If a placeholder does not match any key, replace it with an empty string.\n  GraphAILogger.warn(\"not match template utility function: ${\" + input + \"}\");\n  return \"\";\n};\n","import { DataSource, AgentFunction, AgentFunctionInfo, NodeData, StaticNodeData, ComputedNodeData, NodeState } from \"../type\";\nimport type { GraphNodes } from \"../node\";\nimport { GraphAILogger } from \"./GraphAILogger\";\nimport { utilsFunctions } from \"./prop_function\";\n\nexport const sleep = async (milliseconds: number) => {\n  return await new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport const parseNodeName = (inputNodeId: any, isSelfNode: boolean = false, nodes?: GraphNodes): DataSource => {\n  if (isSelfNode) {\n    if (typeof inputNodeId === \"string\" && inputNodeId[0] === \".\") {\n      const parts = inputNodeId.split(\".\");\n      return { nodeId: \"self\", propIds: parts.slice(1) };\n    }\n    return { value: inputNodeId };\n  }\n  if (typeof inputNodeId === \"string\") {\n    const regex = /^:(.*)$/;\n    const match = inputNodeId.match(regex);\n    if (match) {\n      const parts = match[1].split(/(?<!\\()\\.(?!\\))/);\n      if (parts.length == 1) {\n        return { nodeId: parts[0] };\n      }\n      return { nodeId: parts[0], propIds: parts.slice(1) };\n    }\n    const regexUtil = /^@(.*)$/;\n    const matchUtil = inputNodeId.match(regexUtil);\n    // Only when just called from resultsOfInner\n    if (nodes && matchUtil) {\n      return { value: utilsFunctions(inputNodeId, nodes) };\n    }\n  }\n  return { value: inputNodeId }; // non-string literal\n};\n\nexport function assert(condition: boolean, message: string, isWarn: boolean = false): asserts condition {\n  if (!condition) {\n    if (!isWarn) {\n      throw new Error(message);\n    }\n    GraphAILogger.warn(\"warn: \" + message);\n  }\n}\n\nexport const isObject = <Values = unknown>(x: unknown): x is Record<string, Values> => {\n  return x !== null && typeof x === \"object\";\n};\n\nexport const isNull = (data: unknown) => {\n  return data === null || data === undefined;\n};\n\nexport const strIntentionalError = \"Intentional Error for Debugging\";\n\nexport const defaultAgentInfo = {\n  name: \"defaultAgentInfo\",\n  samples: [\n    {\n      inputs: [],\n      params: {},\n      result: {},\n    },\n  ],\n  description: \"\",\n  category: [],\n  author: \"\",\n  repository: \"\",\n  license: \"\",\n};\n\nexport const agentInfoWrapper = (agent: AgentFunction<any, any, any, any>): AgentFunctionInfo => {\n  return {\n    agent,\n    mock: agent,\n    ...defaultAgentInfo,\n  };\n};\n\nconst objectToKeyArray = (innerData: any) => {\n  const ret: string[][] = [];\n  Object.keys(innerData).forEach((key: string) => {\n    ret.push([key]);\n    if (Object.keys(innerData[key]).length > 0) {\n      objectToKeyArray(innerData[key]).forEach((tmp: string[]) => {\n        ret.push([key, ...tmp]);\n      });\n    }\n  });\n  return ret;\n};\n\nexport const debugResultKey = (agentId: string, result: any) => {\n  return objectToKeyArray({ [agentId]: debugResultKeyInner(result) }).map((objectKeys: string[]) => {\n    return \":\" + objectKeys.join(\".\");\n  });\n};\n\nconst debugResultKeyInner = (result: any) => {\n  if (result === null || result === undefined) {\n    return {};\n  }\n  if (typeof result === \"string\") {\n    return {};\n  }\n  if (Array.isArray(result)) {\n    return Array.from(result.keys()).reduce((tmp: Record<string, any>, index: number) => {\n      tmp[\"$\" + String(index)] = debugResultKeyInner(result[index]);\n      return tmp;\n    }, {});\n  }\n  return Object.keys(result).reduce((tmp: Record<string, any>, key: string) => {\n    tmp[key] = debugResultKeyInner(result[key]);\n    return tmp;\n  }, {});\n};\n\nexport const isLogicallyTrue = (value: any) => {\n  // Notice that empty aray is not true under GraphAI\n  if (Array.isArray(value) ? value.length === 0 : !value) {\n    return false;\n  }\n  return true;\n};\n\nexport const defaultTestContext = {\n  debugInfo: {\n    nodeId: \"test\",\n    retry: 0,\n    verbose: true,\n    state: NodeState.Executing,\n    subGraphs: new Map(),\n  },\n  params: {},\n  filterParams: {},\n  agents: {},\n  log: [],\n};\n\nexport const isNamedInputs = <Values = unknown>(namedInputs: unknown): namedInputs is Record<string, Values> => {\n  return isObject(namedInputs) && !Array.isArray(namedInputs) && Object.keys(namedInputs || {}).length > 0;\n};\n\nexport const isComputedNodeData = (node: NodeData): node is ComputedNodeData => {\n  return \"agent\" in node;\n};\n\nexport const isStaticNodeData = (node: NodeData): node is StaticNodeData => {\n  return !(\"agent\" in node);\n};\n\nexport const loopCounterKey: string = \"__loopIndex\";\n","import { parseNodeName, isObject } from \"./utils\";\nimport { DataSource } from \"../type\";\n\n// for dataSource\nexport const inputs2dataSources = (inputs: any): DataSource[] => {\n  if (Array.isArray(inputs)) {\n    return inputs.map((inp) => inputs2dataSources(inp)).flat();\n  }\n  if (isObject(inputs)) {\n    return Object.values(inputs)\n      .map((input) => inputs2dataSources(input))\n      .flat();\n  }\n  if (typeof inputs === \"string\") {\n    const templateMatch = [...inputs.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      return inputs2dataSources(templateMatch);\n    }\n  }\n\n  return parseNodeName(inputs) as any;\n};\n\n// TODO: Maybe it's a remnant of old array inputs. Check and delete.\nexport const dataSourceNodeIds = (sources: DataSource[]): string[] => {\n  if (!Array.isArray(sources)) {\n    throw new Error(\"sources must be array!! maybe inputs is invalid\");\n  }\n  return sources.filter((source: DataSource) => source.nodeId).map((source) => source.nodeId!);\n};\n","import { ResultData, NodeDataParams, NodeState } from \"./type\";\nimport type { GraphAI } from \"./graphai\";\nimport type { ComputedNode, StaticNode } from \"./node\";\nimport { debugResultKey } from \"./utils/utils\";\nimport { dataSourceNodeIds } from \"./utils/nodeUtils\";\n\nexport class TransactionLog {\n  public nodeId: string;\n  public state: NodeState;\n  public startTime?: number;\n  public endTime?: number;\n  public retryCount?: number;\n  public agentId?: string;\n  public params?: NodeDataParams;\n  public inputs?: string[];\n  public inputsData?: Array<ResultData>;\n  public injectFrom?: string;\n  public errorMessage?: string;\n  public result?: ResultData;\n  public resultKeys?: string[];\n  public mapIndex?: number;\n  public isLoop?: boolean;\n  public repeatCount?: number;\n  public log?: TransactionLog[];\n  constructor(nodeId: string) {\n    this.nodeId = nodeId;\n    this.state = NodeState.Waiting;\n  }\n\n  public initForComputedNode(node: ComputedNode, graph: GraphAI) {\n    this.agentId = node.getAgentId();\n    this.params = node.params;\n    graph.appendLog(this);\n  }\n\n  public onInjected(node: StaticNode, graph: GraphAI, injectFrom?: string) {\n    const isUpdating = \"endTime\" in this;\n    this.result = node.result;\n    this.state = node.state;\n    this.endTime = Date.now();\n    this.injectFrom = injectFrom;\n    graph.setLoopLog(this);\n    // console.log(this)\n    if (isUpdating) {\n      graph.updateLog(this);\n    } else {\n      graph.appendLog(this);\n    }\n  }\n\n  public onComplete(node: ComputedNode, graph: GraphAI, localLog: TransactionLog[]) {\n    this.result = node.result;\n    this.resultKeys = debugResultKey(this.agentId || \"\", node.result);\n    this.state = node.state;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    if (localLog.length > 0) {\n      this.log = localLog;\n    }\n    graph.updateLog(this);\n  }\n\n  public beforeExecute(node: ComputedNode, graph: GraphAI, transactionId: number, inputs: ResultData[]) {\n    this.state = node.state;\n    this.retryCount = node.retryCount > 0 ? node.retryCount : undefined;\n    this.startTime = transactionId;\n    this.inputs = dataSourceNodeIds(node.dataSources);\n    this.inputsData = inputs.length > 0 ? inputs : undefined;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public beforeAddTask(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public onError(node: ComputedNode, graph: GraphAI, errorMessage: string) {\n    this.state = node.state;\n    this.errorMessage = errorMessage;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n\n  public onSkipped(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n}\n","import { ResultData, DataSource, PropFunction } from \"../type\";\nimport { isObject, isNull } from \"./utils\";\nimport { propFunctionRegex } from \"./prop_function\";\nimport { GraphAILogger } from \"./GraphAILogger\";\n\nconst getNestedData = (result: ResultData, propId: string, propFunctions: PropFunction[]) => {\n  const match = propId.match(propFunctionRegex);\n  if (match) {\n    for (const propFunction of propFunctions) {\n      const ret = propFunction(result, propId);\n      if (!isNull(ret)) {\n        return ret;\n      }\n    }\n  }\n\n  // for array.\n  if (Array.isArray(result)) {\n    // $0, $1. array value.\n    const regex = /^\\$(\\d+)$/;\n    const match = propId.match(regex);\n    if (match) {\n      const index = parseInt(match[1], 10);\n      return result[index];\n    }\n    if (propId === \"$last\") {\n      return result[result.length - 1];\n    }\n  } else if (isObject(result)) {\n    if (propId in result) {\n      return result[propId];\n    }\n  }\n  return undefined;\n};\n\nconst innerGetDataFromSource = (result: ResultData, propIds: string[] | undefined, propFunctions: PropFunction[]): ResultData | undefined => {\n  if (!isNull(result) && propIds && propIds.length > 0) {\n    const propId = propIds[0];\n    const ret = getNestedData(result, propId, propFunctions);\n    if (ret === undefined) {\n      GraphAILogger.error(`prop: ${propIds.join(\".\")} is not hit`);\n    }\n    if (propIds.length > 1) {\n      return innerGetDataFromSource(ret, propIds.slice(1), propFunctions);\n    }\n    return ret;\n  }\n  return result;\n};\n\nexport const getDataFromSource = (result: ResultData | undefined, source: DataSource, propFunctions: PropFunction[] = []): ResultData | undefined => {\n  if (!source.nodeId) {\n    return source.value;\n  }\n  return innerGetDataFromSource(result, source.propIds, propFunctions);\n};\n","import { DataSource, ResultData, PropFunction } from \"../type\";\n\nimport { GraphNodes } from \"../node\";\n\nimport { parseNodeName, isNamedInputs, isObject, isNull } from \"./utils\";\nimport { getDataFromSource } from \"./data_source\";\nimport { utilsFunctions } from \"./prop_function\";\n\nconst replaceTemplatePlaceholders = (input: string, templateMatch: string[], nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean) => {\n  // GOD format ${:node.prop1.prop2}\n  const godResults = resultsOfInner(\n    templateMatch.filter((text) => text.startsWith(\":\")),\n    nodes,\n    propFunctions,\n    isSelfNode,\n  );\n  // utilsFunctions ${@now}\n  const utilsFuncResult = templateMatch\n    .filter((text) => text.startsWith(\"@\"))\n    .reduce((tmp: Record<string, string | number>, key: string) => {\n      tmp[key] = utilsFunctions(key, nodes);\n      return tmp;\n    }, {});\n  return Array.from(templateMatch.keys()).reduce((tmp, key) => {\n    if (templateMatch[key].startsWith(\":\")) {\n      return tmp.replaceAll(\"${\" + templateMatch[key] + \"}\", (godResults as any)[key]);\n    }\n    return tmp.replaceAll(\"${\" + templateMatch[key] + \"}\", (utilsFuncResult as any)[templateMatch[key]]);\n  }, input);\n};\n\nconst resultsOfInner = (input: any, nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean = false): ResultData => {\n  if (Array.isArray(input)) {\n    return input.map((inp) => resultsOfInner(inp, nodes, propFunctions, isSelfNode));\n  }\n  if (isNamedInputs(input)) {\n    return resultsOf(input, nodes, propFunctions, isSelfNode);\n  }\n  if (typeof input === \"string\") {\n    const templateMatch = [...input.matchAll(/\\${([:@][^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      return replaceTemplatePlaceholders(input, templateMatch, nodes, propFunctions, isSelfNode);\n    }\n  }\n  // :node.prod\n  return resultOf(parseNodeName(input, isSelfNode, nodes), nodes, propFunctions);\n};\n\nexport const resultsOf = (inputs: Record<string, any>, nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean = false) => {\n  return Object.keys(inputs).reduce((tmp: Record<string, ResultData>, key) => {\n    const input = inputs[key];\n    tmp[key] = isNamedInputs(input) ? resultsOf(input, nodes, propFunctions, isSelfNode) : resultsOfInner(input, nodes, propFunctions, isSelfNode);\n    return tmp;\n  }, {});\n};\n\nexport const resultOf = (source: DataSource, nodes: GraphNodes, propFunctions: PropFunction[]) => {\n  const { result } = source.nodeId ? nodes[source.nodeId] : { result: undefined };\n  return getDataFromSource(result, source, propFunctions);\n};\n\n// clean up object for anyInput\nexport const cleanResultInner = (results: ResultData): ResultData | null => {\n  if (Array.isArray(results)) {\n    return results.map((result: ResultData) => cleanResultInner(result)).filter((result) => !isNull(result));\n  }\n\n  if (isObject<ResultData>(results)) {\n    return Object.keys(results).reduce((tmp: Record<string, ResultData>, key: string) => {\n      const value = cleanResultInner(results[key]);\n      if (!isNull(value)) {\n        tmp[key] = value;\n      }\n      return tmp;\n    }, {});\n  }\n\n  return results;\n};\n\nexport const cleanResult = (results: Record<string, ResultData | undefined>) => {\n  return Object.keys(results).reduce((tmp: Record<string, ResultData | undefined>, key: string) => {\n    const value = cleanResultInner(results[key]);\n    if (!isNull(value)) {\n      tmp[key] = value;\n    }\n    return tmp;\n  }, {});\n};\n","import type { GraphAI, GraphData } from \"./index\";\nimport { strIntentionalError, isNamedInputs } from \"./utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"./utils/nodeUtils\";\n\nimport {\n  NodeDataParams,\n  ResultData,\n  DataSource,\n  ComputedNodeData,\n  StaticNodeData,\n  NodeState,\n  AgentFunctionContext,\n  AgentFunction,\n  AgentFilterInfo,\n  AgentFilterParams,\n  AgentFunctionContextDebugInfo,\n  DefaultParamsType,\n  DefaultInputData,\n  PassThrough,\n  ConsoleElement,\n  ConfigData,\n} from \"./type\";\nimport { parseNodeName, assert, isLogicallyTrue, isObject } from \"./utils/utils\";\nimport { TransactionLog } from \"./transaction_log\";\nimport { resultsOf } from \"./utils/result\";\nimport { GraphAILogger } from \"./utils/GraphAILogger\";\n\nexport class Node {\n  public readonly nodeId: string;\n  public readonly waitlist = new Set<string>(); // List of nodes which need data from this node.\n  public state = NodeState.Waiting;\n  public result: ResultData | undefined = undefined;\n\n  protected graph: GraphAI;\n  protected log: TransactionLog;\n  protected console: ConsoleElement; // console output option (before and/or after)\n\n  constructor(nodeId: string, graph: GraphAI) {\n    this.nodeId = nodeId;\n    this.graph = graph;\n    this.log = new TransactionLog(nodeId);\n    this.console = {};\n  }\n\n  public asString() {\n    return `${this.nodeId}: ${this.state} ${[...this.waitlist]}`;\n  }\n\n  // This method is called either as the result of computation (computed node) or\n  // injection (static node).\n  protected onSetResult() {\n    this.waitlist.forEach((waitingNodeId) => {\n      const waitingNode = this.graph.nodes[waitingNodeId];\n      if (waitingNode.isComputedNode) {\n        waitingNode.removePending(this.nodeId);\n        this.graph.pushQueueIfReadyAndRunning(waitingNode);\n      }\n    });\n  }\n\n  protected afterConsoleLog(result: ResultData) {\n    if (this.console === false) {\n      return;\n    } else if (this.console === true || this.console.after === true) {\n      GraphAILogger.log(typeof result === \"string\" ? result : JSON.stringify(result, null, 2));\n    } else if (this.console.after) {\n      if (isObject(this.console.after)) {\n        GraphAILogger.log(\n          JSON.stringify(resultsOf(this.console.after, { self: { result } as unknown as ComputedNode | StaticNode }, this.graph.propFunctions, true), null, 2),\n        );\n      } else {\n        GraphAILogger.log(this.console.after);\n      }\n    }\n  }\n}\n\nexport class ComputedNode extends Node {\n  public readonly graphId: string;\n  public readonly isResult: boolean;\n  public readonly params: NodeDataParams; // Agent-specific parameters\n  private readonly filterParams: AgentFilterParams;\n  public readonly nestedGraph?: GraphData | DataSource;\n  public readonly retryLimit: number;\n  public retryCount: number = 0;\n  private readonly agentId?: string;\n  private agentFunction?: AgentFunction<any, any, any, any>;\n  public readonly timeout?: number; // msec\n  public readonly priority: number;\n  public error?: Error;\n  public transactionId: undefined | number; // To reject callbacks from timed-out transactions\n  private readonly passThrough?: PassThrough;\n\n  public readonly anyInput: boolean; // any input makes this node ready\n  public dataSources: DataSource[] = []; // no longer needed. This is for transaction log.\n  private inputs?: Record<string, any>;\n  private output?: Record<string, any>;\n  public pendings: Set<string>; // List of nodes this node is waiting data from.\n  private ifSource?: DataSource; // conditional execution\n  private unlessSource?: DataSource; // conditional execution\n  private defaultValue?: ResultData;\n  private isSkip: boolean = false;\n  private debugInfo?: AgentFunctionContextDebugInfo;\n  public readonly isStaticNode = false;\n  public readonly isComputedNode = true;\n\n  constructor(graphId: string, nodeId: string, data: ComputedNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.graphId = graphId;\n    this.params = data.params ?? {};\n    this.console = data.console ?? {};\n    this.filterParams = data.filterParams ?? {};\n    this.passThrough = data.passThrough;\n    this.retryLimit = data.retry ?? graph.retryLimit ?? 0;\n    this.timeout = data.timeout;\n    this.isResult = data.isResult ?? false;\n    this.priority = data.priority ?? 0;\n\n    assert([\"function\", \"string\"].includes(typeof data.agent), \"agent must be either string or function\");\n    if (typeof data.agent === \"string\") {\n      this.agentId = data.agent;\n    } else {\n      const agent = data.agent;\n      this.agentFunction = async ({ namedInputs, params }) => agent(namedInputs, params);\n    }\n\n    this.anyInput = data.anyInput ?? false;\n    this.inputs = data.inputs;\n    this.output = data.output;\n    this.dataSources = [\n      ...(data.inputs ? inputs2dataSources(data.inputs).flat(10) : []),\n      // ...(data.params ? inputs2dataSources(data.params).flat(10) : []),\n      ...(this.agentId ? [parseNodeName(this.agentId)] : []),\n      ...(data.passThrough ? inputs2dataSources(data.passThrough).flat(10) : []),\n    ];\n    if (data.inputs && Array.isArray(data.inputs)) {\n      throw new Error(`array inputs have been deprecated. nodeId: ${nodeId}: see https://github.com/receptron/graphai/blob/main/docs/NamedInputs.md`);\n    }\n\n    this.pendings = new Set(dataSourceNodeIds(this.dataSources));\n    if (data.graph) {\n      this.nestedGraph = typeof data.graph === \"string\" ? this.addPendingNode(data.graph) : data.graph;\n    }\n    if (data.graphLoader && graph.graphLoader) {\n      this.nestedGraph = graph.graphLoader(data.graphLoader);\n    }\n    if (data.if) {\n      this.ifSource = this.addPendingNode(data.if);\n    }\n    if (data.unless) {\n      this.unlessSource = this.addPendingNode(data.unless);\n    }\n    if (data.defaultValue) {\n      this.defaultValue = data.defaultValue;\n    }\n    this.isSkip = false;\n    this.log.initForComputedNode(this, graph);\n  }\n\n  public getAgentId() {\n    return this.agentId ?? \"__custom__function\"; // only for display purpose in the log.\n  }\n\n  private getConfig(hasGraphData: boolean, agentId?: string) {\n    if (agentId) {\n      if (hasGraphData) {\n        return this.graph.config;\n      }\n      const config = this.graph.config ?? {};\n      return {\n        ...(config[\"global\"] ?? {}),\n        ...(config[agentId] ?? {}),\n      };\n    }\n    return {};\n  }\n\n  private addPendingNode(nodeId: string) {\n    const source = parseNodeName(nodeId);\n    assert(!!source.nodeId, `Invalid data source ${nodeId}`);\n    this.pendings.add(source.nodeId);\n    return source;\n  }\n\n  private updateState(state: NodeState) {\n    this.state = state;\n    if (this.debugInfo) {\n      this.debugInfo.state = state;\n    }\n  }\n\n  public resetPending() {\n    this.pendings.clear();\n    if (this.state === NodeState.Executing) {\n      this.updateState(NodeState.Abort);\n    }\n    if (this.debugInfo && this.debugInfo.subGraphs) {\n      this.debugInfo.subGraphs.forEach((graph) => graph.abort(true));\n    }\n  }\n\n  public isReadyNode() {\n    if (this.state !== NodeState.Waiting || this.pendings.size !== 0) {\n      return false;\n    }\n    this.isSkip = !!(\n      (this.ifSource && !isLogicallyTrue(this.graph.resultOf(this.ifSource))) ||\n      (this.unlessSource && isLogicallyTrue(this.graph.resultOf(this.unlessSource)))\n    );\n\n    if (this.isSkip && this.defaultValue === undefined) {\n      this.updateState(NodeState.Skipped);\n      this.log.onSkipped(this, this.graph);\n      return false;\n    }\n    return true;\n  }\n\n  // This private method (only called while executing execute()) performs\n  // the \"retry\" if specified. The transaction log must be updated before\n  // callling this method.\n  private retry(state: NodeState, error: Error) {\n    this.updateState(state); // this.execute() will update to NodeState.Executing\n    this.log.onError(this, this.graph, error.message);\n\n    if (this.retryCount < this.retryLimit) {\n      this.retryCount++;\n      this.execute();\n    } else {\n      this.result = undefined;\n      this.error = error;\n      this.transactionId = undefined; // This is necessary for timeout case\n      this.graph.onExecutionComplete(this);\n    }\n  }\n\n  private checkDataAvailability() {\n    return Object.values(this.graph.resultsOf(this.inputs))\n      .flat()\n      .some((result) => result !== undefined);\n  }\n\n  // This method is called right before the Graph add this node to the task manager.\n  public beforeAddTask() {\n    this.updateState(NodeState.Queued);\n    this.log.beforeAddTask(this, this.graph);\n  }\n\n  // This method is called when the data became available on one of nodes,\n  // which this node needs data from.\n  public removePending(nodeId: string) {\n    if (this.anyInput) {\n      if (this.checkDataAvailability()) {\n        this.pendings.clear();\n      }\n    } else {\n      this.pendings.delete(nodeId);\n    }\n  }\n\n  private isCurrentTransaction(transactionId: number) {\n    return this.transactionId === transactionId;\n  }\n\n  // This private method (called only fro execute) checks if the callback from\n  // the timer came before the completion of agent function call, record it\n  // and attempt to retry (if specified).\n  private executeTimeout(transactionId: number) {\n    if (this.state === NodeState.Executing && this.isCurrentTransaction(transactionId)) {\n      GraphAILogger.warn(`-- timeout ${this.timeout} with ${this.nodeId}`);\n      this.retry(NodeState.TimedOut, Error(\"Timeout\"));\n    }\n  }\n\n  // Check if we need to apply this filter to this node or not.\n  private shouldApplyAgentFilter(agentFilter: AgentFilterInfo, agentId?: string) {\n    if (agentFilter.agentIds && Array.isArray(agentFilter.agentIds) && agentFilter.agentIds.length > 0) {\n      if (agentId && agentFilter.agentIds.includes(agentId)) {\n        return true;\n      }\n    }\n    if (agentFilter.nodeIds && Array.isArray(agentFilter.nodeIds) && agentFilter.nodeIds.length > 0) {\n      if (agentFilter.nodeIds.includes(this.nodeId)) {\n        return true;\n      }\n    }\n    return !agentFilter.agentIds && !agentFilter.nodeIds;\n  }\n\n  private agentFilterHandler(context: AgentFunctionContext, agentFunction: AgentFunction, agentId?: string): Promise<ResultData> {\n    let index = 0;\n\n    const next = (innerContext: AgentFunctionContext): Promise<ResultData> => {\n      const agentFilter = this.graph.agentFilters[index++];\n      if (agentFilter) {\n        if (this.shouldApplyAgentFilter(agentFilter, agentId)) {\n          if (agentFilter.filterParams) {\n            innerContext.filterParams = { ...agentFilter.filterParams, ...innerContext.filterParams };\n          }\n          return agentFilter.agent(innerContext, next);\n        }\n        return next(innerContext);\n      }\n      return agentFunction(innerContext);\n    };\n\n    return next(context);\n  }\n\n  // This method is called when this computed node became ready to run.\n  // It asynchronously calls the associated with agent function and set the result,\n  // then it removes itself from the \"running node\" list of the graph.\n  // Notice that setting the result of this node may make other nodes ready to run.\n  public async execute() {\n    if (this.isSkip) {\n      this.afterExecute(this.defaultValue, []);\n      return;\n    }\n    const previousResults = this.graph.resultsOf(this.inputs, this.anyInput);\n    const agentId = this.agentId ? (this.graph.resultOf(parseNodeName(this.agentId)) as string) : this.agentId;\n    if (typeof agentId === \"function\") {\n      this.agentFunction = agentId;\n    }\n    const hasNestedGraph = Boolean(this.nestedGraph) || Boolean(agentId && this.graph.getAgentFunctionInfo(agentId).hasGraphData);\n    const config: ConfigData | undefined = this.getConfig(hasNestedGraph, agentId);\n\n    const transactionId = Date.now();\n    this.prepareExecute(transactionId, Object.values(previousResults));\n\n    if (this.timeout && this.timeout > 0) {\n      setTimeout(() => {\n        this.executeTimeout(transactionId);\n      }, this.timeout);\n    }\n\n    try {\n      const agentFunction = this.agentFunction ?? this.graph.getAgentFunctionInfo(agentId).agent;\n      const localLog: TransactionLog[] = [];\n      const context = this.getContext(previousResults, localLog, agentId, config);\n\n      // NOTE: We use the existence of graph object in the agent-specific params to determine\n      // if this is a nested agent or not.\n      if (hasNestedGraph) {\n        this.graph.taskManager.prepareForNesting();\n        context.forNestedGraph = {\n          graphData: this.nestedGraph\n            ? \"nodes\" in this.nestedGraph\n              ? this.nestedGraph\n              : (this.graph.resultOf(this.nestedGraph) as GraphData) // HACK: compiler work-around\n            : { version: 0, nodes: {} },\n          agents: this.graph.agentFunctionInfoDictionary,\n          graphOptions: {\n            agentFilters: this.graph.agentFilters,\n            taskManager: this.graph.taskManager,\n            bypassAgentIds: this.graph.bypassAgentIds,\n            config,\n            graphLoader: this.graph.graphLoader,\n          },\n          onLogCallback: this.graph.onLogCallback,\n          callbacks: this.graph.callbacks,\n        };\n      }\n\n      this.beforeConsoleLog(context);\n      const result = await this.agentFilterHandler(context as AgentFunctionContext, agentFunction, agentId);\n      this.afterConsoleLog(result);\n\n      if (hasNestedGraph) {\n        this.graph.taskManager.restoreAfterNesting();\n      }\n\n      if (!this.isCurrentTransaction(transactionId)) {\n        // This condition happens when the agent function returns\n        // after the timeout (either retried or not).\n        GraphAILogger.log(`-- transactionId mismatch with ${this.nodeId} (probably timeout)`);\n        return;\n      }\n\n      // after process\n      this.afterExecute(result, localLog);\n    } catch (error) {\n      this.errorProcess(error, transactionId, previousResults);\n    }\n  }\n\n  private afterExecute(result: ResultData, localLog: TransactionLog[]) {\n    if (this.state == NodeState.Abort) {\n      return;\n    }\n    this.updateState(NodeState.Completed);\n    this.result = this.getResult(result);\n    if (this.output) {\n      this.result = resultsOf(this.output, { self: this }, this.graph.propFunctions, true);\n      if (this.passThrough) {\n        this.result = { ...this.result, ...this.graph.resultsOf(this.passThrough) };\n      }\n    }\n    this.log.onComplete(this, this.graph, localLog);\n\n    this.onSetResult();\n\n    this.graph.onExecutionComplete(this);\n  }\n\n  // This private method (called only by execute()) prepares the ComputedNode object\n  // for execution, and create a new transaction to record it.\n  private prepareExecute(transactionId: number, inputs: Array<ResultData>) {\n    this.updateState(NodeState.Executing);\n    this.log.beforeExecute(this, this.graph, transactionId, inputs);\n    this.transactionId = transactionId;\n  }\n\n  // This private method (called only by execute) processes an error received from\n  // the agent function. It records the error in the transaction log and handles\n  // the retry if specified.\n  private errorProcess(error: unknown, transactionId: number, namedInputs: DefaultInputData) {\n    if (error instanceof Error && error.message !== strIntentionalError) {\n      GraphAILogger.error(`<-- NodeId: ${this.nodeId}, Agent: ${this.agentId}`);\n      GraphAILogger.error({ namedInputs });\n      GraphAILogger.error(error);\n      GraphAILogger.error(\"-->\");\n    }\n    if (!this.isCurrentTransaction(transactionId)) {\n      GraphAILogger.warn(`-- transactionId mismatch with ${this.nodeId} (not timeout)`);\n      return;\n    }\n\n    if (error instanceof Error) {\n      this.retry(NodeState.Failed, error);\n    } else {\n      GraphAILogger.error(`-- NodeId: ${this.nodeId}: Unknown error was caught`);\n      this.retry(NodeState.Failed, Error(\"Unknown\"));\n    }\n  }\n\n  private getContext(previousResults: Record<string, ResultData | undefined>, localLog: TransactionLog[], agentId?: string, config?: ConfigData) {\n    // Pass debugInfo by reference, and the state of this node will be received by agent/agentFilter.\n    // From graphAgent(nested, map), set the instance of graphai, and use abort on the child graphai.\n    this.debugInfo = this.getDebugInfo(agentId);\n    const params = {\n      ...(this.params ?? {}),\n      ...(isNamedInputs(previousResults?.params) ? previousResults?.params : {}),\n    };\n    const context: AgentFunctionContext<DefaultParamsType, DefaultInputData | string | number | boolean | undefined> = {\n      //params: this.graph.resultsOf(this.params),\n      params,\n      namedInputs: previousResults,\n      inputSchema: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(agentId)?.inputs,\n      debugInfo: this.debugInfo,\n      cacheType: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(agentId)?.cacheType,\n      filterParams: this.filterParams,\n      config,\n      log: localLog,\n    };\n    return context;\n  }\n\n  private getResult(result: ResultData) {\n    if (result && this.passThrough) {\n      if (isObject(result) && !Array.isArray(result)) {\n        return { ...result, ...this.graph.resultsOf(this.passThrough) };\n      } else if (Array.isArray(result)) {\n        return result.map((r) => (isObject(r) && !Array.isArray(r) ? { ...r, ...this.graph.resultsOf(this.passThrough) } : r));\n      }\n    }\n    return result;\n  }\n\n  private getDebugInfo(agentId?: string) {\n    return {\n      nodeId: this.nodeId,\n      agentId,\n      retry: this.retryCount,\n      state: this.state,\n      subGraphs: new Map(),\n      verbose: this.graph.verbose,\n      version: this.graph.version,\n      isResult: this.isResult,\n    };\n  }\n\n  private beforeConsoleLog(context: AgentFunctionContext<DefaultParamsType, string | number | boolean | DefaultInputData | undefined>) {\n    if (this.console === false) {\n      return;\n    } else if (this.console === true || this.console.before === true) {\n      GraphAILogger.log(JSON.stringify(context.namedInputs, null, 2));\n    } else if (this.console.before) {\n      GraphAILogger.log(this.console.before);\n    }\n  }\n}\n\nexport class StaticNode extends Node {\n  public value?: ResultData;\n  public readonly update?: DataSource;\n  public readonly isResult: boolean;\n  public readonly isStaticNode = true;\n  public readonly isComputedNode = false;\n\n  constructor(nodeId: string, data: StaticNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.value = data.value;\n    this.update = data.update ? parseNodeName(data.update) : undefined;\n    this.isResult = data.isResult ?? false;\n    this.console = data.console ?? {};\n  }\n\n  public updateValue(value: ResultData, injectFrom?: string) {\n    this.value = value;\n    this.log.onInjected(this, this.graph, injectFrom);\n  }\n  public setResultValue(injectFrom?: string) {\n    this.state = NodeState.Injected;\n    this.result = this.value;\n    this.log.onInjected(this, this.graph, injectFrom);\n    this.onSetResult();\n  }\n\n  public consoleLog() {\n    this.afterConsoleLog(this.result);\n  }\n}\n\nexport type GraphNodes = Record<string, ComputedNode | StaticNode>;\n","export const graphDataAttributeKeys = [\"nodes\", \"concurrency\", \"agentId\", \"loop\", \"verbose\", \"version\", \"metadata\"];\n\nexport const computedNodeAttributeKeys = [\n  \"inputs\",\n  \"output\",\n  \"anyInput\",\n  \"params\",\n  \"retry\",\n  \"timeout\",\n  \"agent\",\n  \"graph\",\n  \"graphLoader\",\n  \"isResult\",\n  \"priority\",\n  \"if\",\n  \"unless\",\n  \"defaultValue\",\n  \"filterParams\",\n  \"console\",\n  \"passThrough\",\n];\nexport const staticNodeAttributeKeys = [\"value\", \"update\", \"isResult\", \"console\"];\n\nexport class ValidationError extends Error {\n  constructor(message: string) {\n    super(`\\x1b[41m${message}\\x1b[0m`); // Pass the message to the base Error class\n\n    // Set the prototype explicitly to ensure correct prototype chain\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n","import { GraphData } from \"../type\";\nimport { graphDataAttributeKeys, ValidationError } from \"./common\";\n\nexport const graphNodesValidator = (data: GraphData) => {\n  if (data.nodes === undefined) {\n    throw new ValidationError(\"Invalid Graph Data: no nodes\");\n  }\n  if (typeof data.nodes !== \"object\") {\n    throw new ValidationError(\"Invalid Graph Data: invalid nodes\");\n  }\n  if (Array.isArray(data.nodes)) {\n    throw new ValidationError(\"Invalid Graph Data: nodes must be object\");\n  }\n  if (Object.keys(data.nodes).length === 0) {\n    throw new ValidationError(\"Invalid Graph Data: nodes is empty\");\n  }\n  Object.keys(data).forEach((key) => {\n    if (!graphDataAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Graph Data does not allow \" + key);\n    }\n  });\n};\nexport const graphDataValidator = (data: GraphData) => {\n  if (data.loop) {\n    if (data.loop.count === undefined && data.loop.while === undefined) {\n      throw new ValidationError(\"Loop: Either count or while is required in loop\");\n    }\n    if (data.loop.count !== undefined && data.loop.while !== undefined) {\n      throw new ValidationError(\"Loop: Both count and while cannot be set\");\n    }\n  }\n  if (data.concurrency !== undefined) {\n    if (!Number.isInteger(data.concurrency)) {\n      throw new ValidationError(\"Concurrency must be an integer\");\n    }\n    if (data.concurrency < 1) {\n      throw new ValidationError(\"Concurrency must be a positive integer\");\n    }\n  }\n};\n","import { GraphData, AgentFunctionInfoDictionary } from \"./type\";\nimport { isStaticNodeData } from \"./utils/utils\";\nimport { graphNodesValidator, graphDataValidator } from \"./validators/graph_data_validator\";\nimport { nodeValidator } from \"./validators/nodeValidator\";\nimport { staticNodeValidator } from \"./validators/static_node_validator\";\nimport { computedNodeValidator } from \"./validators/computed_node_validator\";\nimport { relationValidator } from \"./validators/relation_validator\";\nimport { agentValidator } from \"./validators/agent_validator\";\n\nimport { ValidationError } from \"./validators/common\";\n\nexport const validateGraphData = (data: GraphData, agentIds: string[]) => {\n  graphNodesValidator(data);\n  graphDataValidator(data);\n  const computedNodeIds: string[] = [];\n  const staticNodeIds: string[] = [];\n  const graphAgentIds = new Set<string>();\n  Object.keys(data.nodes).forEach((nodeId) => {\n    const node = data.nodes[nodeId];\n    const isStaticNode = isStaticNodeData(node);\n    nodeValidator(node);\n    const agentId = isStaticNode ? \"\" : node.agent;\n    isStaticNode && staticNodeValidator(node) && staticNodeIds.push(nodeId);\n    !isStaticNode && computedNodeValidator(node) && computedNodeIds.push(nodeId) && typeof agentId === \"string\" && graphAgentIds.add(agentId);\n  });\n  agentValidator(graphAgentIds, new Set<string>(agentIds));\n  relationValidator(data, staticNodeIds, computedNodeIds);\n\n  return true;\n};\n\nexport const validateAgent = (agentFunctionInfoDictionary: AgentFunctionInfoDictionary) => {\n  Object.keys(agentFunctionInfoDictionary).forEach((agentId: string) => {\n    if (agentId !== \"default\") {\n      const agentInfo = agentFunctionInfoDictionary[agentId];\n      if (!agentInfo || !agentInfo.agent) {\n        throw new ValidationError(\"No Agent: \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n      }\n    }\n  });\n};\n","import { NodeData, StaticNodeData, ComputedNodeData } from \"../type\";\nimport { ValidationError } from \"./common\";\n\nexport const nodeValidator = (nodeData: NodeData) => {\n  if ((nodeData as ComputedNodeData).agent && (nodeData as StaticNodeData).value) {\n    throw new ValidationError(\"Cannot set both agent and value\");\n  }\n  // if (!(\"agent\" in nodeData) && !(\"value\" in nodeData)) {\n  //   throw new ValidationError(\"Either agent or value is required\");\n  // }\n  return true;\n};\n","import { StaticNodeData } from \"../type\";\nimport { staticNodeAttributeKeys, ValidationError } from \"./common\";\n\nexport const staticNodeValidator = (nodeData: StaticNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!staticNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Static node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ComputedNodeData } from \"../type\";\nimport { computedNodeAttributeKeys, ValidationError } from \"./common\";\n\nexport const computedNodeValidator = (nodeData: ComputedNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!computedNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Computed node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ValidationError } from \"./common\";\n\nexport const agentValidator = (graphAgentIds: Set<string>, agentIds: Set<string>) => {\n  graphAgentIds.forEach((agentId) => {\n    // agentId or dynamic agentId\n    if (!agentIds.has(agentId) && agentId[0] !== \":\") {\n      throw new ValidationError(\"Invalid Agent : \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n    }\n  });\n  return true;\n};\n","import { GraphData } from \"../type\";\nimport { parseNodeName, isComputedNodeData, isStaticNodeData } from \"../utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"../utils/nodeUtils\";\nimport { ValidationError } from \"./common\";\n\nexport const relationValidator = (graphData: GraphData, staticNodeIds: string[], computedNodeIds: string[]) => {\n  const nodeIds = new Set<string>(Object.keys(graphData.nodes));\n\n  const pendings: Record<string, Set<string>> = {};\n  const waitlist: Record<string, Set<string>> = {};\n\n  // validate input relation and set pendings and wait list\n  computedNodeIds.forEach((computedNodeId) => {\n    const nodeData = graphData.nodes[computedNodeId];\n    pendings[computedNodeId] = new Set<string>();\n\n    const dataSourceValidator = (sourceType: string, sourceNodeIds: string[]) => {\n      sourceNodeIds.forEach((sourceNodeId) => {\n        if (sourceNodeId) {\n          if (!nodeIds.has(sourceNodeId)) {\n            throw new ValidationError(`${sourceType} not match: NodeId ${computedNodeId}, Inputs: ${sourceNodeId}`);\n          }\n          waitlist[sourceNodeId] === undefined && (waitlist[sourceNodeId] = new Set<string>());\n          pendings[computedNodeId].add(sourceNodeId);\n          waitlist[sourceNodeId].add(computedNodeId);\n        }\n      });\n    };\n    if (nodeData && isComputedNodeData(nodeData)) {\n      if (nodeData.inputs) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.inputs));\n        dataSourceValidator(\"Inputs\", sourceNodeIds);\n      }\n      /*\n      if (nodeData.params) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.params));\n        dataSourceValidator(\"Params\", sourceNodeIds);\n      }\n      */\n      if (nodeData.if) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ if: nodeData.if }));\n        dataSourceValidator(\"If\", sourceNodeIds);\n      }\n      if (nodeData.unless) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ unless: nodeData.unless }));\n        dataSourceValidator(\"Unless\", sourceNodeIds);\n      }\n      if (nodeData.graph && typeof nodeData?.graph === \"string\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ graph: nodeData.graph }));\n        dataSourceValidator(\"Graph\", sourceNodeIds);\n      }\n      if (typeof nodeData.agent === \"string\" && nodeData.agent[0] === \":\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ agent: nodeData.agent }));\n        dataSourceValidator(\"Agent\", sourceNodeIds);\n      }\n    }\n  });\n\n  // TODO. validate update\n  staticNodeIds.forEach((staticNodeId) => {\n    const nodeData = graphData.nodes[staticNodeId];\n    if (isStaticNodeData(nodeData) && nodeData.update) {\n      const update = nodeData.update;\n      const updateNodeId = parseNodeName(update).nodeId;\n      if (!updateNodeId) {\n        throw new ValidationError(\"Update it a literal\");\n      }\n      if (!nodeIds.has(updateNodeId)) {\n        throw new ValidationError(`Update not match: NodeId ${staticNodeId}, update: ${update}`);\n      }\n    }\n  });\n\n  const cycle = (possibles: string[]) => {\n    possibles.forEach((possobleNodeId) => {\n      (waitlist[possobleNodeId] || []).forEach((waitingNodeId) => {\n        pendings[waitingNodeId].delete(possobleNodeId);\n      });\n    });\n\n    const running: string[] = [];\n    Object.keys(pendings).forEach((pendingNodeId) => {\n      if (pendings[pendingNodeId].size === 0) {\n        running.push(pendingNodeId);\n        delete pendings[pendingNodeId];\n      }\n    });\n    return running;\n  };\n\n  let runningQueue = cycle(staticNodeIds);\n  if (runningQueue.length === 0) {\n    throw new ValidationError(\"No Initial Runnning Node\");\n  }\n\n  do {\n    runningQueue = cycle(runningQueue);\n  } while (runningQueue.length > 0);\n\n  if (Object.keys(pendings).length > 0) {\n    throw new ValidationError(\"Some nodes are not executed: \" + Object.keys(pendings).join(\", \"));\n  }\n};\n","import { ComputedNode } from \"./node\";\nimport { assert } from \"./utils/utils\";\n\ntype TaskEntry = {\n  node: ComputedNode;\n  graphId: string;\n  callback: (node: ComputedNode) => void;\n};\n\n// TaskManage object controls the concurrency of ComputedNode execution.\n//\n// NOTE: A TaskManager instance will be shared between parent graph and its children\n// when nested agents are involved.\nexport class TaskManager {\n  private concurrency: number;\n  private taskQueue: Array<TaskEntry> = [];\n  private runningNodes = new Set<ComputedNode>();\n\n  constructor(concurrency: number) {\n    this.concurrency = concurrency;\n  }\n\n  // This internal method dequeus a task from the task queue\n  // and call the associated callback method, if the number of\n  // running task is lower than the spcified limit.\n  private dequeueTaskIfPossible() {\n    if (this.runningNodes.size < this.concurrency) {\n      const task = this.taskQueue.shift();\n      if (task) {\n        this.runningNodes.add(task.node);\n        task.callback(task.node);\n      }\n    }\n  }\n\n  // Node will call this method to put itself in the execution queue.\n  // We call the associated callback function when it is dequeued.\n  public addTask(node: ComputedNode, graphId: string, callback: (node: ComputedNode) => void) {\n    // Finder tasks in the queue, which has either the same or higher priority.\n    const count = this.taskQueue.filter((task) => {\n      return task.node.priority >= node.priority;\n    }).length;\n    assert(count <= this.taskQueue.length, \"TaskManager.addTask: Something is really wrong.\");\n    this.taskQueue.splice(count, 0, { node, graphId, callback });\n    this.dequeueTaskIfPossible();\n  }\n\n  public isRunning(graphId: string) {\n    const count = [...this.runningNodes].filter((node) => {\n      return node.graphId == graphId;\n    }).length;\n    return count > 0 || Array.from(this.taskQueue).filter((data) => data.graphId === graphId).length > 0;\n  }\n\n  // Node MUST call this method once the execution of agent function is completed\n  // either successfully or not.\n  public onComplete(node: ComputedNode) {\n    assert(this.runningNodes.has(node), `TaskManager.onComplete node(${node.nodeId}) is not in list`);\n    this.runningNodes.delete(node);\n    this.dequeueTaskIfPossible();\n  }\n\n  // Node will call this method before it hands the task manager from the graph\n  // to a nested agent. We need to make it sure that there is enough room to run\n  // computed nodes inside the nested graph to avoid a deadlock.\n  public prepareForNesting() {\n    this.concurrency++;\n  }\n\n  public restoreAfterNesting() {\n    this.concurrency--;\n  }\n\n  public getStatus(verbose: boolean = false) {\n    const runningNodes = Array.from(this.runningNodes).map((node) => node.nodeId);\n    const queuedNodes = this.taskQueue.map((task) => task.node.nodeId);\n    const nodes = verbose ? { runningNodes, queuedNodes } : {};\n    return {\n      concurrency: this.concurrency,\n      queue: this.taskQueue.length,\n      running: this.runningNodes.size,\n      ...nodes,\n    };\n  }\n\n  public reset() {\n    this.taskQueue.length = 0;\n    this.runningNodes.clear();\n  }\n}\n","import {\n  AgentFunctionInfoDictionary,\n  AgentFilterInfo,\n  GraphData,\n  DataSource,\n  LoopData,\n  ResultDataDictionary,\n  ResultData,\n  DefaultResultData,\n  GraphOptions,\n  PropFunction,\n  GraphDataLoader,\n  ConfigDataDictionary,\n  CallbackFunction,\n} from \"./type\";\nimport { TransactionLog } from \"./transaction_log\";\n\nimport { ComputedNode, StaticNode, GraphNodes } from \"./node\";\n\nimport { resultsOf, resultOf, cleanResult } from \"./utils/result\";\nimport { propFunctions } from \"./utils/prop_function\";\nimport { parseNodeName, assert, isLogicallyTrue, isComputedNodeData, loopCounterKey } from \"./utils/utils\";\nimport { getDataFromSource } from \"./utils/data_source\";\n\nimport { validateGraphData, validateAgent } from \"./validator\";\nimport { TaskManager } from \"./task_manager\";\nimport { GraphAILogger } from \"./utils/GraphAILogger\";\n\nexport const defaultConcurrency = 8;\nexport const graphDataLatestVersion = 0.5;\n\nexport class GraphAI {\n  public readonly version: number;\n  public readonly graphId: string;\n  private readonly graphData: GraphData;\n  private staticNodeInitData: Record<string, ResultData> = {};\n  private readonly loop?: LoopData;\n  private readonly forceLoop: boolean;\n  private readonly logs: Array<TransactionLog> = [];\n  public readonly bypassAgentIds: string[];\n  public readonly config?: ConfigDataDictionary = {};\n  public readonly agentFunctionInfoDictionary: AgentFunctionInfoDictionary;\n  public readonly taskManager: TaskManager;\n  public readonly agentFilters: AgentFilterInfo[];\n  public readonly retryLimit?: number;\n  public readonly propFunctions: PropFunction[];\n  public readonly graphLoader?: GraphDataLoader;\n\n  public nodes: GraphNodes;\n  public onLogCallback: CallbackFunction = (__log: TransactionLog, __isUpdate: boolean) => {};\n  public callbacks: CallbackFunction[] = [];\n  public verbose: boolean; // REVIEW: Do we need this?\n\n  private onComplete: (isAbort: boolean) => void;\n  private repeatCount = 0;\n\n  // This method is called when either the GraphAI obect was created,\n  // or we are about to start n-th iteration (n>2).\n  private createNodes(graphData: GraphData) {\n    const nodes = Object.keys(graphData.nodes).reduce((_nodes: GraphNodes, nodeId: string) => {\n      const nodeData = graphData.nodes[nodeId];\n      if (isComputedNodeData(nodeData)) {\n        _nodes[nodeId] = new ComputedNode(this.graphId, nodeId, nodeData, this);\n      } else {\n        const updateValue = this.staticNodeInitData[nodeId];\n        _nodes[nodeId] = new StaticNode(nodeId, updateValue !== undefined ? { ...nodeData, value: updateValue } : nodeData, this);\n      }\n      return _nodes;\n    }, {});\n\n    // Generate the waitlist for each node.\n    Object.keys(nodes).forEach((nodeId) => {\n      const node = nodes[nodeId];\n      if (node.isComputedNode) {\n        node.pendings.forEach((pending) => {\n          if (nodes[pending]) {\n            nodes[pending].waitlist.add(nodeId); // previousNode\n          } else {\n            throw new Error(`createNode: invalid input ${pending} for node, ${nodeId}`);\n          }\n        });\n      }\n    });\n    return nodes;\n  }\n\n  private getValueFromResults(source: DataSource, results: ResultDataDictionary<DefaultResultData>) {\n    return getDataFromSource(source.nodeId ? results[source.nodeId] : undefined, source, this.propFunctions);\n  }\n\n  // for static\n  private setStaticNodeResults(enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.graphData.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const value = node?.value;\n        if (value !== undefined) {\n          node.setResultValue(nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  private updateStaticNodes(previousResults?: ResultDataDictionary<DefaultResultData>, enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.graphData.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const update = node?.update;\n        if (update && previousResults) {\n          const result = this.getValueFromResults(update, previousResults);\n          this.updateStaticNodeValue(nodeId, result, update.nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  constructor(\n    graphData: GraphData,\n    agentFunctionInfoDictionary: AgentFunctionInfoDictionary,\n    options: GraphOptions = {\n      taskManager: undefined,\n      agentFilters: [],\n      bypassAgentIds: [],\n      config: {},\n      graphLoader: undefined,\n      forceLoop: false,\n    },\n  ) {\n    if (!graphData.version && !options.taskManager) {\n      GraphAILogger.warn(\"------------ missing version number\");\n    }\n    this.version = graphData.version ?? graphDataLatestVersion;\n    if (this.version < graphDataLatestVersion) {\n      GraphAILogger.warn(`------------ upgrade to ${graphDataLatestVersion}!`);\n    }\n    this.retryLimit = graphData.retry; // optional\n    this.graphId = `${Date.now().toString(36)}-${Math.random().toString(36).substr(2, 9)}`; // URL.createObjectURL(new Blob()).slice(-36);\n    this.agentFunctionInfoDictionary = agentFunctionInfoDictionary;\n    this.propFunctions = propFunctions;\n    this.taskManager = options.taskManager ?? new TaskManager(graphData.concurrency ?? defaultConcurrency);\n    this.agentFilters = options.agentFilters ?? [];\n    this.bypassAgentIds = options.bypassAgentIds ?? [];\n    this.config = options.config;\n    this.graphLoader = options.graphLoader;\n    this.forceLoop = options.forceLoop ?? false;\n    this.loop = graphData.loop;\n    this.verbose = graphData.verbose === true;\n    this.onComplete = (__isAbort: boolean) => {\n      throw new Error(\"SOMETHING IS WRONG: onComplete is called without run()\");\n    };\n\n    validateGraphData(graphData, [...Object.keys(agentFunctionInfoDictionary), ...this.bypassAgentIds]);\n    validateAgent(agentFunctionInfoDictionary);\n\n    this.graphData = {\n      ...graphData,\n      nodes: {\n        ...graphData.nodes,\n        [loopCounterKey]: { value: 0, update: `:${loopCounterKey}.add(1)` },\n      },\n    };\n    this.nodes = this.createNodes(this.graphData);\n  }\n\n  public getAgentFunctionInfo(agentId?: string) {\n    if (agentId && this.agentFunctionInfoDictionary[agentId]) {\n      return this.agentFunctionInfoDictionary[agentId];\n    }\n    if (agentId && this.bypassAgentIds.includes(agentId)) {\n      return {\n        agent: async () => {\n          return null;\n        },\n        hasGraphData: false,\n        inputs: null,\n        cacheType: undefined, // for node.getContext\n      };\n    }\n    // We are not supposed to hit this error because the validator will catch it.\n    throw new Error(\"No agent: \" + agentId);\n  }\n\n  public asString() {\n    return Object.values(this.nodes)\n      .map((node) => node.asString())\n      .join(\"\\n\");\n  }\n\n  // Public API\n  public results<T = DefaultResultData>(all: boolean, internalUse: boolean = false): ResultDataDictionary<T> {\n    return Object.keys(this.nodes)\n      .filter((nodeId) => (all && (internalUse || nodeId !== loopCounterKey)) || this.nodes[nodeId].isResult)\n      .reduce((results: ResultDataDictionary<T>, nodeId) => {\n        const node = this.nodes[nodeId];\n        if (node.result !== undefined) {\n          results[nodeId] = node.result as T;\n        }\n        return results;\n      }, {});\n  }\n\n  // Public API\n  public errors(): Record<string, Error> {\n    return Object.keys(this.nodes).reduce((errors: Record<string, Error>, nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        if (node.error !== undefined) {\n          errors[nodeId] = node.error;\n        }\n      }\n      return errors;\n    }, {});\n  }\n\n  private pushReadyNodesIntoQueue() {\n    // Nodes without pending data should run immediately.\n    Object.keys(this.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        this.pushQueueIfReady(node);\n      }\n    });\n  }\n\n  private pushQueueIfReady(node: ComputedNode) {\n    if (node.isReadyNode()) {\n      this.pushQueue(node);\n    }\n  }\n\n  public pushQueueIfReadyAndRunning(node: ComputedNode) {\n    if (this.isRunning()) {\n      this.pushQueueIfReady(node);\n    }\n  }\n\n  // for computed\n  public pushQueue(node: ComputedNode) {\n    node.beforeAddTask();\n\n    this.taskManager.addTask(node, this.graphId, (_node) => {\n      assert(node.nodeId === _node.nodeId, \"GraphAI.pushQueue node mismatch\");\n      node.execute();\n    });\n  }\n\n  // Public API\n  public async run<T = DefaultResultData>(all: boolean = false): Promise<ResultDataDictionary<T>> {\n    this.setStaticNodeResults();\n\n    const invalidStaticNodes = Object.values(this.nodes)\n      .filter((node) => node.isStaticNode)\n      .filter((node) => node.result === undefined && node.update === undefined);\n\n    if (invalidStaticNodes.length > 0) {\n      const nodeIds = invalidStaticNodes.map((node) => node.nodeId).join(\", \");\n      throw new Error(`Static node(s) must have value. Set value, injectValue, or set update. Affected nodeIds: ${nodeIds}`);\n    }\n    if (this.isRunning()) {\n      throw new Error(\"This GraphAI instance is already running\");\n    }\n\n    this.pushReadyNodesIntoQueue();\n\n    if (!this.isRunning()) {\n      GraphAILogger.warn(\"-- nothing to execute\");\n      return {};\n    }\n\n    return new Promise((resolve, reject) => {\n      this.onComplete = (isAbort: boolean = false) => {\n        const errors = this.errors();\n        const errorNodeIds = Object.keys(errors);\n        if (errorNodeIds.length > 0 || isAbort) {\n          reject(errors[errorNodeIds[0]]);\n        } else {\n          resolve(this.results(all));\n        }\n      };\n    });\n  }\n\n  public abort(isChild = false) {\n    if (this.isRunning()) {\n      this.resetPending();\n      // Stop All Running node.\n    }\n    // For an agent like an event agent, where an external promise remains unresolved,\n    // aborting and then retrying can cause nodes or the graph to execute again.\n    // To prevent this, the transactionId is updated to ensure the retry fails.\n    Object.values(this.nodes).forEach((node) => node.isComputedNode && (node.transactionId = undefined));\n    if (!isChild) {\n      this.taskManager.reset();\n    }\n    this.onComplete(this.isRunning());\n  }\n  public resetPending() {\n    Object.values(this.nodes).map((node) => {\n      if (node.isComputedNode) {\n        node.resetPending();\n      }\n    });\n  }\n\n  // Public only for testing\n  public isRunning() {\n    return this.taskManager.isRunning(this.graphId);\n  }\n\n  // callback from execute\n  public onExecutionComplete(node: ComputedNode) {\n    this.taskManager.onComplete(node);\n    if (this.isRunning() || this.processLoopIfNecessary()) {\n      return; // continue running\n    }\n    this.onComplete(false); // Nothing to run. Finish it.\n  }\n\n  // Must be called only from onExecutionComplete righ after removeRunning\n  // Check if there is any running computed nodes.\n  // In case of no running computed note, start the another iteration if ncessary (loop)\n  private processLoopIfNecessary() {\n    //\n    if (!this.forceLoop && Object.keys(this.errors()).length > 0) {\n      return false;\n    }\n\n    this.repeatCount++;\n    const loop = this.loop;\n    if (!loop) {\n      return false;\n    }\n\n    // We need to update static nodes, before checking the condition\n    const previousResults = this.results(true, true); // results from previous loop\n    this.updateStaticNodes(previousResults);\n    this.setStaticNodeResults();\n\n    if (loop.count === undefined || this.repeatCount < loop.count) {\n      if (loop.while) {\n        const source = parseNodeName(loop.while);\n        const value = this.getValueFromResults(source, this.results(true, true));\n        // NOTE: We treat an empty array as false.\n        if (!isLogicallyTrue(value)) {\n          return false; // while condition is not met\n        }\n      }\n      this.nodes = this.createNodes(this.graphData);\n      this.updateStaticNodes(previousResults, true);\n      this.setStaticNodeResults();\n\n      this.pushReadyNodesIntoQueue();\n      return true; // Indicating that we are going to continue.\n    }\n    return false;\n  }\n\n  public initializeGraphAI() {\n    if (this.isRunning()) {\n      throw new Error(\"This GraphAI instance is running\");\n    }\n    this.nodes = this.createNodes(this.graphData);\n    this.setStaticNodeResults();\n  }\n  public setPreviousResults(previousResults: ResultDataDictionary<DefaultResultData>) {\n    this.updateStaticNodes(previousResults);\n  }\n  public setLoopLog(log: TransactionLog) {\n    log.isLoop = !!this.loop;\n    log.repeatCount = this.repeatCount;\n  }\n\n  public appendLog(log: TransactionLog) {\n    this.logs.push(log);\n    this.onLogCallback(log, false);\n    this.callbacks.forEach((callback) => callback(log, false));\n  }\n\n  public updateLog(log: TransactionLog) {\n    this.onLogCallback(log, true);\n    this.callbacks.forEach((callback) => callback(log, false));\n  }\n\n  public registerCallback(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n\n  public clearCallbacks() {\n    this.callbacks = [];\n  }\n\n  // Public API\n  public transactionLogs() {\n    return this.logs;\n  }\n\n  // Public API\n  public injectValue(nodeId: string, value: ResultData, injectFrom?: string): void {\n    this.staticNodeInitData[nodeId] = value;\n    this.updateStaticNodeValue(nodeId, value, injectFrom);\n  }\n  private updateStaticNodeValue(nodeId: string, value: ResultData, injectFrom?: string): void {\n    const node = this.nodes[nodeId];\n    if (node && node.isStaticNode) {\n      node.updateValue(value, injectFrom);\n    } else {\n      throw new Error(`injectValue with Invalid nodeId, ${nodeId}`);\n    }\n  }\n  public resultsOf(inputs?: Record<string, any>, anyInput: boolean = false) {\n    const results = resultsOf(inputs ?? {}, this.nodes, this.propFunctions);\n    if (anyInput) {\n      return cleanResult(results);\n    }\n    return results;\n  }\n  public resultOf(source: DataSource) {\n    return resultOf(source, this.nodes, this.propFunctions);\n  }\n}\n"],"names":["NodeState","enabledLevels","debug","info","log","warn","error","customLogger","output","level","args","console","GraphAILogger","setLevelEnabled","enabled","setLogger","logger","propFunctionRegex","propFunctions","result","propId","Array","isArray","length","flat","JSON","stringify","reduce","a","b","Math","max","min","matchJoin","match","join","isObject","Object","keys","values","parse","ret","Number","isNaN","trim","toLowerCase","toUpperCase","sliceMatch","undefined","slice","splitMatch","split","isFinite","String","regex","utilsFunctions","input","nodes","Date","now","floor","loopCounterKey","parseNodeName","inputNodeId","isSelfNode","nodeId","propIds","value","parts","regexUtil","matchUtil","assert","condition","message","isWarn","Error","x","isNull","data","strIntentionalError","defaultAgentInfo","name","samples","inputs","params","description","category","author","repository","license","objectToKeyArray","innerData","forEach","key","push","tmp","debugResultKey","agentId","debugResultKeyInner","map","objectKeys","from","index","isLogicallyTrue","defaultTestContext","debugInfo","retry","verbose","state","Executing","subGraphs","Map","filterParams","agents","isNamedInputs","namedInputs","isComputedNodeData","node","isStaticNodeData","inputs2dataSources","inp","templateMatch","matchAll","m","dataSourceNodeIds","sources","filter","source","TransactionLog","constructor","this","Waiting","initForComputedNode","graph","getAgentId","appendLog","onInjected","injectFrom","isUpdating","endTime","setLoopLog","updateLog","onComplete","localLog","resultKeys","beforeExecute","transactionId","retryCount","startTime","dataSources","inputsData","beforeAddTask","onError","errorMessage","onSkipped","innerGetDataFromSource","propFunction","parseInt","getNestedData","getDataFromSource","resultsOfInner","resultsOf","godResults","text","startsWith","utilsFuncResult","replaceAll","replaceTemplatePlaceholders","resultOf","cleanResultInner","results","Node","waitlist","Set","asString","onSetResult","waitingNodeId","waitingNode","isComputedNode","removePending","pushQueueIfReadyAndRunning","afterConsoleLog","after","self","ComputedNode","graphId","super","isSkip","isStaticNode","passThrough","retryLimit","timeout","isResult","priority","includes","agent","agentFunction","async","anyInput","pendings","nestedGraph","addPendingNode","graphLoader","if","ifSource","unless","unlessSource","defaultValue","getConfig","hasGraphData","config","add","updateState","resetPending","clear","Abort","abort","isReadyNode","size","Skipped","execute","onExecutionComplete","checkDataAvailability","some","Queued","delete","isCurrentTransaction","executeTimeout","TimedOut","shouldApplyAgentFilter","agentFilter","agentIds","nodeIds","agentFilterHandler","context","next","innerContext","agentFilters","afterExecute","previousResults","hasNestedGraph","Boolean","getAgentFunctionInfo","prepareExecute","setTimeout","getContext","taskManager","prepareForNesting","forNestedGraph","graphData","version","agentFunctionInfoDictionary","graphOptions","bypassAgentIds","onLogCallback","callbacks","beforeConsoleLog","restoreAfterNesting","errorProcess","Completed","getResult","Failed","getDebugInfo","inputSchema","cacheType","r","before","StaticNode","update","updateValue","setResultValue","Injected","consoleLog","graphDataAttributeKeys","computedNodeAttributeKeys","staticNodeAttributeKeys","ValidationError","setPrototypeOf","prototype","validateGraphData","graphNodesValidator","loop","count","while","concurrency","isInteger","graphDataValidator","computedNodeIds","staticNodeIds","graphAgentIds","nodeData","nodeValidator","computedNodeValidator","has","agentValidator","computedNodeId","dataSourceValidator","sourceType","sourceNodeIds","sourceNodeId","staticNodeId","updateNodeId","cycle","possibles","possobleNodeId","running","pendingNodeId","runningQueue","relationValidator","TaskManager","taskQueue","runningNodes","dequeueTaskIfPossible","task","shift","callback","addTask","splice","isRunning","getStatus","queuedNodes","queue","reset","graphDataLatestVersion","createNodes","_nodes","staticNodeInitData","pending","getValueFromResults","setStaticNodeResults","enableConsoleLog","updateStaticNodes","updateStaticNodeValue","options","forceLoop","logs","__log","__isUpdate","repeatCount","toString","random","substr","__isAbort","agentInfo","validateAgent","all","internalUse","errors","pushReadyNodesIntoQueue","pushQueueIfReady","pushQueue","_node","run","invalidStaticNodes","Promise","resolve","reject","isAbort","errorNodeIds","isChild","processLoopIfNecessary","initializeGraphAI","setPreviousResults","isLoop","registerCallback","clearCallbacks","transactionLogs","injectValue","cleanResult","mock","milliseconds"],"mappings":"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"}