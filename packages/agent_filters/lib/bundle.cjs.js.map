{"version":3,"file":"bundle.cjs.js","sources":["../src/filters/namedinput_validator.ts","../src/filters/http_client.ts"],"sourcesContent":["import { AgentFilterFunction } from \"graphai\";\nimport Ajv from \"ajv\";\n\n// export for test\nexport const agentInputValidator = (inputSchema: any, namedInputs: any, nodeId: string, agentId: string | undefined) => {\n  const ajv = new Ajv();\n  const validateSchema = ajv.compile(inputSchema);\n  if (!validateSchema(namedInputs)) {\n    // console.log(validateSchema.errors);\n    throw new Error(`${nodeId}(${agentId ?? \"func\"}) schema not matched`);\n  }\n  return true;\n};\n\nexport const namedInputValidatorFilter: AgentFilterFunction = async (context, next) => {\n  const { inputSchema, namedInputs } = context;\n  const { agentId, nodeId } = context.debugInfo;\n\n  if (inputSchema) {\n    if (inputSchema.type !== \"array\") {\n      agentInputValidator(inputSchema, namedInputs || {}, nodeId, agentId);\n    }\n  }\n\n  return next(context);\n};\n","import { AgentFilterFunction, AgentFunctionContext, isObject } from \"graphai\";\n\nasync function* streamChatCompletion(url: string, postData: AgentFunctionContext, userHeaders: any) {\n  const { params, namedInputs, debugInfo, filterParams } = postData;\n  const postBody = { params, debugInfo, filterParams, namedInputs };\n  const headers = { ...userHeaders, \"Content-Type\": \"text/event-stream\" };\n\n  const completion = await fetch(url, {\n    headers,\n    method: \"POST\",\n    body: JSON.stringify(postBody),\n  });\n\n  const reader = completion.body?.getReader();\n\n  if (completion.status !== 200 || !reader) {\n    throw new Error(\"Request failed\");\n  }\n\n  const decoder = new TextDecoder(\"utf-8\");\n  let done = false;\n  while (!done) {\n    const { done: readDone, value } = await reader.read();\n    if (readDone) {\n      done = readDone;\n      reader.releaseLock();\n    } else {\n      const token = decoder.decode(value, { stream: true });\n      yield token;\n    }\n  }\n}\n\nconst streamingRequest = async (context: AgentFunctionContext, url: string, postData: AgentFunctionContext, userHeaders: any, isDebug: boolean | undefined) => {\n  const generator = streamChatCompletion(url, postData, userHeaders);\n\n  const messages = [];\n  for await (const token of generator) {\n    if (isDebug) {\n      console.log(token);\n    }\n    // callback to stream filter\n    if (token) {\n      messages.push(token);\n      if (messages.join(\"\").indexOf(\"___END___\") === -1 && context.filterParams.streamTokenCallback) {\n        context.filterParams.streamTokenCallback(token);\n      }\n    }\n  }\n\n  const payload_data = messages.join(\"\").split(\"___END___\")[1];\n  const data = JSON.parse(payload_data);\n  return data;\n};\nconst httpRequest = async (url: string, postData: AgentFunctionContext, userHeaders: any) => {\n  const headers = { ...userHeaders, \"Content-Type\": \"application/json\" };\n  const response = await fetch(url, {\n    method: \"post\",\n    headers,\n    body: JSON.stringify(postData),\n  });\n  return await response.json();\n};\n\nexport const httpAgentFilter: AgentFilterFunction = async (context, next) => {\n  const { params, debugInfo, filterParams, namedInputs, config } = context;\n\n  if (filterParams?.server) {\n    const { baseUrl, isDebug, serverAgentUrlDictionary } = filterParams.server;\n    const headers = config?.headers ?? {};\n    if (!isObject(headers)) {\n      throw new Error(\"httpAgentFilter: headers is not object.\");\n    }\n    const agentId = debugInfo.agentId;\n    const isStreaming = filterParams.streamTokenCallback !== undefined;\n    const url = serverAgentUrlDictionary && agentId && serverAgentUrlDictionary[agentId] ? serverAgentUrlDictionary[agentId] : [baseUrl, agentId].join(\"/\");\n    if (url === undefined) {\n      console.log(\"httpAgentFilter: Url is not defined\");\n    }\n    const postData = {\n      params,\n      debugInfo,\n      filterParams,\n      namedInputs,\n      inputs: namedInputs, // alias.\n    };\n    if (isStreaming) {\n      return await streamingRequest(context, url, postData, headers, isDebug);\n    }\n    return await httpRequest(url, postData, headers);\n  }\n  return next(context);\n};\n"],"names":["agentInputValidator","inputSchema","namedInputs","nodeId","agentId","Ajv","compile","validateSchema","Error","streamingRequest","async","context","url","postData","userHeaders","isDebug","generator","params","debugInfo","filterParams","postBody","headers","completion","fetch","method","body","JSON","stringify","reader","getReader","status","decoder","TextDecoder","done","readDone","value","read","releaseLock","token","decode","stream","streamChatCompletion","messages","console","log","push","join","indexOf","streamTokenCallback","payload_data","split","parse","next","config","server","baseUrl","serverAgentUrlDictionary","isObject","isStreaming","undefined","inputs","response","json","httpRequest","type"],"mappings":"kOAIO,MAAMA,EAAsB,CAACC,EAAkBC,EAAkBC,EAAgBC,KAGtF,KAFY,IAAIC,GACWC,QAAQL,EAC9BM,CAAeL,GAElB,MAAM,IAAIM,MAAM,GAAGL,KAAUC,GAAW,8BAE1C,OAAO,CAAI,ECsBb,MAAMK,EAAmBC,MAAOC,EAA+BC,EAAaC,EAAgCC,EAAkBC,KAC5H,MAAMC,EAhCRN,gBAAqCE,EAAaC,EAAgCC,GAChF,MAAMG,OAAEA,EAAMf,YAAEA,EAAWgB,UAAEA,EAASC,aAAEA,GAAiBN,EACnDO,EAAW,CAAEH,SAAQC,YAAWC,eAAcjB,eAC9CmB,EAAU,IAAKP,EAAa,eAAgB,qBAE5CQ,QAAmBC,MAAMX,EAAK,CAClCS,UACAG,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KAGjBQ,EAASN,EAAWG,MAAMI,YAEhC,GAA0B,MAAtBP,EAAWQ,SAAmBF,EAChC,MAAM,IAAIpB,MAAM,kBAGlB,MAAMuB,EAAU,IAAIC,YAAY,SAChC,IAAIC,GAAO,EACX,MAAQA,GAAM,CACZ,MAAQA,KAAMC,EAAQC,MAAEA,SAAgBP,EAAOQ,OAC/C,GAAIF,EACFD,EAAOC,EACPN,EAAOS,kBACF,CACL,MAAMC,EAAQP,EAAQQ,OAAOJ,EAAO,CAAEK,QAAQ,UACxCF,GAGZ,CAGoBG,CAAqB7B,EAAKC,EAAUC,GAEhD4B,EAAW,GACjB,UAAW,MAAMJ,KAAStB,EACpBD,GACF4B,QAAQC,IAAIN,GAGVA,IACFI,EAASG,KAAKP,QACVI,EAASI,KAAK,IAAIC,QAAQ,cAAuBpC,EAAQQ,aAAa6B,qBACxErC,EAAQQ,aAAa6B,oBAAoBV,IAK/C,MAAMW,EAAeP,EAASI,KAAK,IAAII,MAAM,aAAa,GAE1D,OADaxB,KAAKyB,MAAMF,EACb,0vBAYuCvC,MAAOC,EAASyC,KAClE,MAAMnC,OAAEA,EAAMC,UAAEA,EAASC,aAAEA,EAAYjB,YAAEA,EAAWmD,OAAEA,GAAW1C,EAEjE,GAAIQ,GAAcmC,OAAQ,CACxB,MAAMC,QAAEA,EAAOxC,QAAEA,EAAOyC,yBAAEA,GAA6BrC,EAAamC,OAC9DjC,EAAUgC,GAAQhC,SAAW,CAAE,EACrC,IAAKoC,EAAAA,SAASpC,GACZ,MAAM,IAAIb,MAAM,2CAElB,MAAMJ,EAAUc,EAAUd,QACpBsD,OAAmDC,IAArCxC,EAAa6B,oBAC3BpC,EAAM4C,GAA4BpD,GAAWoD,EAAyBpD,GAAWoD,EAAyBpD,GAAW,CAACmD,EAASnD,GAAS0C,KAAK,UACvIa,IAAR/C,GACF+B,QAAQC,IAAI,uCAEd,MAAM/B,EAAW,CACfI,SACAC,YACAC,eACAjB,cACA0D,OAAQ1D,GAEV,OAAIwD,QACWjD,EAAiBE,EAASC,EAAKC,EAAUQ,EAASN,QAjCjDL,OAAOE,EAAaC,EAAgCC,KACtE,MAAMO,EAAU,IAAKP,EAAa,eAAgB,oBAC5C+C,QAAiBtC,MAAMX,EAAK,CAChCY,OAAQ,OACRH,UACAI,KAAMC,KAAKC,UAAUd,KAEvB,aAAagD,EAASC,MAAM,EA4BbC,CAAYnD,EAAKC,EAAUQ,GAE1C,OAAO+B,EAAKzC,EAAQ,oCD7EwCD,MAAOC,EAASyC,KAC5E,MAAMnD,YAAEA,EAAWC,YAAEA,GAAgBS,GAC/BP,QAAEA,EAAOD,OAAEA,GAAWQ,EAAQO,UAQpC,OANIjB,GACuB,UAArBA,EAAY+D,MACdhE,EAAoBC,EAAaC,GAAe,CAAA,EAAIC,EAAQC,GAIzDgD,EAAKzC,EAAQ"}